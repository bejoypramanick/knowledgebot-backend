FROM public.ecr.aws/lambda/python:3.10

# Install minimal system dependencies for Amazon Linux 2023 (mandatory only)
RUN yum update -y && \
    yum install -y \
    gcc \
    gcc-c++ \
    make \
    libffi-devel \
    openssl-devel \
    zlib-devel \
    bzip2-devel \
    readline-devel \
    sqlite-devel \
    xz-devel \
    expat-devel \
    gdbm-devel \
    ncurses-devel \
    python3-devel \
    && yum clean all

# Create cache directories
RUN mkdir -p /tmp/transformers_cache \
    /tmp/huggingface_cache \
    /tmp/huggingface_datasets_cache \
    /tmp/torch_cache \
    /tmp/sentence_transformers_cache

# Install core Python dependencies
RUN pip install --upgrade pip==24.0 setuptools wheel

# Pre-install NumPy to prevent upgrades during ML package installation
RUN pip install --no-cache-dir numpy>=1.26.4

# Install ML stack first - allow source builds if needed
RUN pip install --no-cache-dir \
    torch>=2.3.0 \
    transformers>=4.40.0 \
    sentence-transformers>=2.7.0

# Install TensorFlow separately
RUN pip install --no-cache-dir tensorflow>=2.16.0

# Copy and install remaining dependencies from requirements.txt
# Allow agents to build from source if no wheel available
COPY agent-toolkit/requirements.txt ${LAMBDA_TASK_ROOT}/
RUN pip install --no-cache-dir --prefer-binary \
    --no-binary agents \
    -r requirements.txt

# Set environment variables
ENV TRANSFORMERS_CACHE=/tmp/transformers_cache
ENV HF_HOME=/tmp/huggingface_cache
ENV HF_DATASETS_CACHE=/tmp/huggingface_datasets_cache
ENV TORCH_HOME=/tmp/torch_cache
ENV SENTENCE_TRANSFORMERS_HOME=/tmp/sentence_transformers_cache

# Pre-download models
RUN python -c "\
import os; \
try: \
    from sentence_transformers import SentenceTransformer; \
    model = SentenceTransformer('all-MiniLM-L6-v2'); \
    print('Sentence transformer model downloaded'); \
except Exception as e: \
    print(f'Sentence transformer download failed: {e}'); \
try: \
    from docling.document_converter import DocumentConverter; \
    converter = DocumentConverter(); \
    print('Docling models downloaded'); \
except Exception as e: \
    print(f'Docling model download failed: {e}'); \
"

# Copy application code
COPY agent-toolkit/ ${LAMBDA_TASK_ROOT}/

# Set the CMD to your handler
CMD ["lambda_handlers.lambda_handler_knowledge_chat"]