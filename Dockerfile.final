FROM public.ecr.aws/lambda/python:3.10

# Install system dependencies
RUN yum update -y && \
    yum install -y \
    gcc \
    gcc-c++ \
    gcc10 \
    gcc10-c++ \
    make \
    cmake \
    git \
    wget \
    curl \
    unzip \
    libffi-devel \
    openssl-devel \
    libjpeg-devel \
    libpng-devel \
    libtiff-devel \
    freetype-devel \
    lcms2-devel \
    libwebp-devel \
    tcl-devel \
    tk-devel \
    libxml2-devel \
    libxslt-devel \
    zlib-devel \
    bzip2-devel \
    readline-devel \
    sqlite-devel \
    xz-devel \
    expat-devel \
    gdbm-devel \
    ncurses-devel \
    libuuid-devel \
    python3-devel \
    && yum clean all

# Set environment variables to use GCC 10 for C++20 support
ENV CC=/usr/bin/gcc10
ENV CXX=/usr/bin/g++10

# Create cache directories
RUN mkdir -p /tmp/transformers_cache \
    /tmp/huggingface_cache \
    /tmp/huggingface_datasets_cache \
    /tmp/torch_cache \
    /tmp/sentence_transformers_cache

# Install core Python dependencies
RUN pip install --upgrade pip==24.0 setuptools wheel

# Pre-install NumPy to prevent upgrades during ML package installation
RUN pip install --no-cache-dir numpy==1.26.4

# Install ML stack first (these are pinned in requirements.txt)
RUN pip install --no-cache-dir \
    torch==2.1.0 \
    transformers==4.36.0 \
    sentence-transformers==2.2.2 \
    tensorflow==2.20.0

# Copy and install remaining dependencies from requirements.txt
# Exclude ML packages already installed to avoid conflicts
COPY agent-toolkit/requirements.txt ${LAMBDA_TASK_ROOT}/
RUN pip install --no-cache-dir \
    --no-binary agents \
    $(grep -vE "^(torch|transformers|sentence-transformers|tensorflow|numpy)==" requirements.txt | grep -v "^#" | grep -v "^$")

# Set environment variables
ENV TRANSFORMERS_CACHE=/tmp/transformers_cache
ENV HF_HOME=/tmp/huggingface_cache
ENV HF_DATASETS_CACHE=/tmp/huggingface_datasets_cache
ENV TORCH_HOME=/tmp/torch_cache
ENV SENTENCE_TRANSFORMERS_HOME=/tmp/sentence_transformers_cache

# Pre-download models
RUN python -c "\
import os; \
try: \
    from sentence_transformers import SentenceTransformer; \
    model = SentenceTransformer('all-MiniLM-L6-v2'); \
    print('Sentence transformer model downloaded'); \
except Exception as e: \
    print(f'Sentence transformer download failed: {e}'); \
try: \
    from docling.document_converter import DocumentConverter; \
    converter = DocumentConverter(); \
    print('Docling models downloaded'); \
except Exception as e: \
    print(f'Docling model download failed: {e}'); \
"

# Copy application code
COPY agent-toolkit/ ${LAMBDA_TASK_ROOT}/

# Set the CMD to your handler
CMD ["lambda_handlers.lambda_handler_knowledge_chat"]