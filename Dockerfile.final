# Dockerfile.final
# Complete application: Python 3.12 Lambda base with full ML stack and Docling
FROM public.ecr.aws/lambda/python:3.12

LABEL maintainer="KnowledgeBot Team"
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PIP_NO_CACHE_DIR=1

# Skip system dependencies - try with pre-compiled Python packages first
# ML packages often have ARM64 wheels available

# Upgrade pip and install core dependencies
RUN python -m pip install --upgrade pip setuptools wheel

# Install core Python packages
RUN python -m pip install --no-cache-dir \
    boto3>=1.34.0 \
    botocore>=1.34.0 \
    openai>=1.12.0 \
    openai-agents>=0.1.0 \
    pinecone-client>=3.1.0 \
    neo4j>=5.24.0 \
    httpx>=0.25.0 \
    orjson>=3.9.0 \
    structlog>=23.2.0 \
    pydantic>=2.5.0 \
    typing-extensions>=4.9.0

# Install data processing and ML stack
RUN python -m pip install --no-cache-dir \
    "numpy>=1.26.0,<2.0.0" \
    pandas>=2.2.0

# Install ML libraries with CPU-only PyTorch for Lambda
RUN python -m pip install --no-cache-dir \
    --extra-index-url https://download.pytorch.org/whl/cpu \
    torch>=2.1.0 \
    transformers>=4.36.0 \
    sentence-transformers>=2.2.2 \
    tensorflow>=2.14.0

# Install Docling for document processing (now uses the installed PyTorch)
RUN python -m pip install --no-cache-dir \
    docling>=2.25.0

# Copy application code
COPY agent-toolkit/ ${LAMBDA_TASK_ROOT}/

# Make the handler executable
RUN chmod +x ${LAMBDA_TASK_ROOT}/lambda_handlers.py

# Enhanced logging with explicit CloudWatch integration
RUN echo '#!/bin/bash' > /tmp/lambda_entrypoint.sh && \
    echo 'set -e' >> /tmp/lambda_entrypoint.sh && \
    echo '# Function to ensure logs reach CloudWatch' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch() {' >> /tmp/lambda_entrypoint.sh && \
    echo '    echo "[$(date)] $1" >&2' >> /tmp/lambda_entrypoint.sh && \
    echo '    echo "[$(date)] $1"' >> /tmp/lambda_entrypoint.sh && \
    echo '}' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "=== LAMBDA ENTRYPOINT DEBUG START ==="' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "Timestamp: $(date)"' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "Container ID: $(hostname)"' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "Working Directory: $(pwd)"' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "User: $(whoami)"' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "=== ENVIRONMENT VARIABLES ==="' >> /tmp/lambda_entrypoint.sh && \
    echo 'env | sort | while read line; do log_to_cloudwatch "ENV: $line"; done' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "=== FILE SYSTEM CHECK ==="' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "Files in /var/task:"' >> /tmp/lambda_entrypoint.sh && \
    echo 'ls -la /var/task/ | while read line; do log_to_cloudwatch "FILE: $line"; done' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "=== PYTHON ENVIRONMENT CHECK ==="' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "Python executable: $(which python)"' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "Python version: $(python --version)"' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "Python path: $(python -c \"import sys; print(sys.path)\")"' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "=== MODULE IMPORT TEST ==="' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "Testing lambda_handlers import..."' >> /tmp/lambda_entrypoint.sh && \
    echo 'python -c "try: import lambda_handlers; print(\"✅ lambda_handlers imported successfully\"); except Exception as e: print(\"❌ lambda_handlers import failed:\", str(e)); import traceback; traceback.print_exc()" 2>&1 | while read line; do log_to_cloudwatch "IMPORT: $line"; done' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "=== LAMBDA HANDLER TEST ==="' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "Testing lambda_handler function..."' >> /tmp/lambda_entrypoint.sh && \
    echo 'python -c "try: from lambda_handlers import lambda_handler; print(\"✅ lambda_handler function found\"); except Exception as e: print(\"❌ lambda_handler function not found:\", str(e)); import traceback; traceback.print_exc()" 2>&1 | while read line; do log_to_cloudwatch "HANDLER: $line"; done' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "=== STARTING LAMBDA HANDLER ==="' >> /tmp/lambda_entrypoint.sh && \
    echo 'log_to_cloudwatch "Executing: python -m lambda_handlers.lambda_handler"' >> /tmp/lambda_entrypoint.sh && \
    echo 'exec python -m lambda_handlers.lambda_handler' >> /tmp/lambda_entrypoint.sh && \
    chmod +x /tmp/lambda_entrypoint.sh

ENTRYPOINT ["/tmp/lambda_entrypoint.sh"]
# Trigger full deployment
# Trigger fresh build with current code
