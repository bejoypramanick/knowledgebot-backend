# Dockerfile.final
# Complete application: Python 3.12 Lambda base with full ML stack and Docling
FROM public.ecr.aws/lambda/python:3.12

LABEL maintainer="KnowledgeBot Team"
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PIP_NO_CACHE_DIR=1

# Skip system dependencies - try with pre-compiled Python packages first
# ML packages often have ARM64 wheels available

# Upgrade pip and install core dependencies
RUN python -m pip install --upgrade pip setuptools wheel

# Install core Python packages
RUN python -m pip install --no-cache-dir \
    boto3>=1.34.0 \
    botocore>=1.34.0 \
    openai>=1.12.0 \
    openai-agents>=0.1.0 \
    pinecone-client>=3.1.0 \
    neo4j>=5.24.0 \
    httpx>=0.25.0 \
    orjson>=3.9.0 \
    structlog>=23.2.0 \
    pydantic>=2.5.0 \
    typing-extensions>=4.9.0

# Install data processing and ML stack
RUN python -m pip install --no-cache-dir \
    "numpy>=1.26.0,<2.0.0" \
    pandas>=2.2.0

# Install ML libraries with CPU-only PyTorch for Lambda
RUN python -m pip install --no-cache-dir \
    --extra-index-url https://download.pytorch.org/whl/cpu \
    torch>=2.1.0 \
    transformers>=4.36.0 \
    sentence-transformers>=2.2.2 \
    tensorflow>=2.14.0

# Install Docling for document processing (now uses the installed PyTorch)
RUN python -m pip install --no-cache-dir \
    docling>=2.25.0

# Copy application code
COPY agent-toolkit/ ${LAMBDA_TASK_ROOT}/

# Make the handler executable
RUN chmod +x ${LAMBDA_TASK_ROOT}/lambda_handlers.py

# Enhanced debugging entrypoint with detailed logging
RUN echo '#!/bin/bash' > /tmp/debug.sh && \
    echo 'echo "=== DOCKER IMAGE DEBUG START ==="' >> /tmp/debug.sh && \
    echo 'echo "Timestamp: $(date)"' >> /tmp/debug.sh && \
    echo 'echo "Container ID: $(hostname)"' >> /tmp/debug.sh && \
    echo 'echo "User: $(whoami)"' >> /tmp/debug.sh && \
    echo 'echo "Working Directory: $(pwd)"' >> /tmp/debug.sh && \
    echo 'echo "Environment Variables:"' >> /tmp/debug.sh && \
    echo 'env | sort' >> /tmp/debug.sh && \
    echo 'echo "=== FILE SYSTEM DEBUG ==="' >> /tmp/debug.sh && \
    echo 'echo "Root directory contents:"' >> /tmp/debug.sh && \
    echo 'ls -la /' >> /tmp/debug.sh && \
    echo 'echo "Lambda task root contents:"' >> /tmp/debug.sh && \
    echo 'ls -la /var/task/' >> /tmp/debug.sh && \
    echo 'echo "=== PYTHON DEBUG ==="' >> /tmp/debug.sh && \
    echo 'echo "Python executable: $(which python)"' >> /tmp/debug.sh && \
    echo 'echo "Python version:"' >> /tmp/debug.sh && \
    echo 'python --version' >> /tmp/debug.sh && \
    echo 'echo "Python path:"' >> /tmp/debug.sh && \
    echo 'python -c "import sys; print(sys.path)"' >> /tmp/debug.sh && \
    echo 'echo "=== LAMBDA RUNTIME DEBUG ==="' >> /tmp/debug.sh && \
    echo 'echo "Lambda runtime environment:"' >> /tmp/debug.sh && \
    echo 'echo "AWS_LAMBDA_RUNTIME_API: $AWS_LAMBDA_RUNTIME_API"' >> /tmp/debug.sh && \
    echo 'echo "AWS_LAMBDA_FUNCTION_NAME: $AWS_LAMBDA_FUNCTION_NAME"' >> /tmp/debug.sh && \
    echo 'echo "AWS_LAMBDA_FUNCTION_VERSION: $AWS_LAMBDA_FUNCTION_VERSION"' >> /tmp/debug.sh && \
    echo 'echo "=== ENTRYPOINT TEST ==="' >> /tmp/debug.sh && \
    echo 'echo "Testing if we can execute Python..."' >> /tmp/debug.sh && \
    echo 'python -c "print(\"Python execution successful\")"' >> /tmp/debug.sh && \
    echo 'echo "=== DOCKER IMAGE DEBUG END ==="' >> /tmp/debug.sh && \
    echo 'echo "Container ready for Lambda runtime"' >> /tmp/debug.sh && \
    chmod +x /tmp/debug.sh

ENTRYPOINT ["/tmp/debug.sh"]
# Trigger full deployment
# Trigger fresh build with current code
