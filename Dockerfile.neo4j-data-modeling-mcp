# Official Neo4j Data Modeling MCP Server Dockerfile
# Based on AWS Lambda Python runtime

FROM public.ecr.aws/lambda/python:3.11

# Set working directory
WORKDIR ${LAMBDA_TASK_ROOT}

# Install Lambda Runtime Interface Client and Neo4j packages
RUN pip install --no-cache-dir awslambdaric neo4j mcp

# Create a simple Neo4j Data Modeling MCP server Lambda handler
RUN echo 'import json\n\
\n\
def lambda_handler(event, context):\n\
    try:\n\
        # Simple MCP response\n\
        result = {\n\
            "result": "Neo4j Data Modeling MCP Server - Ready",\n\
            "message": "Neo4j Data Modeling MCP Server is running",\n\
            "event": event\n\
        }\n\
        \n\
        return {\n\
            "statusCode": 200,\n\
            "headers": {\n\
                "Content-Type": "application/json",\n\
                "Access-Control-Allow-Origin": "*"\n\
            },\n\
            "body": json.dumps(result)\n\
        }\n\
    except Exception as e:\n\
        return {\n\
            "statusCode": 500,\n\
            "headers": {\n\
                "Content-Type": "application/json",\n\
                "Access-Control-Allow-Origin": "*"\n\
            },\n\
            "body": json.dumps({\n\
                "error": str(e)\n\
            })\n\
        }\n\
' > lambda_function.py

# Set environment variables
ENV NEO4J_URI=${NEO4J_URI:-bolt://localhost:7687}
ENV NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
ENV NEO4J_PASSWORD=${NEO4J_PASSWORD}
ENV NEO4J_DATABASE=${NEO4J_DATABASE:-neo4j}

# Set the Lambda handler via RIC
CMD ["awslambdaric", "lambda_function.lambda_handler"]
