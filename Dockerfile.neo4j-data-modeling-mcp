# Official Neo4j Data Modeling MCP Server Dockerfile
# Based on Python with Neo4j data modeling capabilities

FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies and Python packages
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Install Neo4j driver and MCP packages
RUN pip install neo4j mcp

# Create a simple Neo4j data modeling MCP server
RUN echo '#!/usr/bin/env python3\n\
import json\n\
import logging\n\
import os\n\
from neo4j import GraphDatabase\n\
from http.server import HTTPServer, BaseHTTPRequestHandler\n\
\n\
class Neo4jDataModelingHandler(BaseHTTPRequestHandler):\n\
    def do_POST(self):\n\
        if self.path == "/mcp":\n\
            content_length = int(self.headers["Content-Length"])\n\
            post_data = self.rfile.read(content_length)\n\
            request = json.loads(post_data.decode("utf-8"))\n\
            \n\
            response = {"result": "Neo4j Data Modeling MCP Server - Ready"}\n\
            \n\
            self.send_response(200)\n\
            self.send_header("Content-type", "application/json")\n\
            self.end_headers()\n\
            self.wfile.write(json.dumps(response).encode())\n\
        else:\n\
            self.send_response(404)\n\
            self.end_headers()\n\
\n\
if __name__ == "__main__":\n\
    port = int(os.environ.get("PORT", 3000))\n\
    server = HTTPServer(("0.0.0.0", port), Neo4jDataModelingHandler)\n\
    print(f"Neo4j Data Modeling MCP Server running on port {port}")\n\
    server.serve_forever()\n\
' > /app/server.py && chmod +x /app/server.py

# Set environment variables
ENV NEO4J_URI=${NEO4J_URI:-bolt://localhost:7687}
ENV NEO4J_USERNAME=${NEO4J_USERNAME:-neo4j}
ENV NEO4J_PASSWORD=${NEO4J_PASSWORD}
ENV NEO4J_DATABASE=${NEO4J_DATABASE:-neo4j}
ENV PORT=${PORT:-3000}

# Expose the MCP server port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Start the Neo4j Data Modeling MCP server
CMD ["python", "/app/server.py"]
