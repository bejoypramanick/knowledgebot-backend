FROM public.ecr.aws/lambda/python:3.10

# Install system dependencies for Docling including GCC 10
RUN yum update -y && \
    yum install -y \
    gcc \
    gcc-c++ \
    gcc10 \
    gcc10-c++ \
    make \
    cmake \
    git \
    wget \
    curl \
    unzip \
    libffi-devel \
    openssl-devel \
    libjpeg-devel \
    libpng-devel \
    libtiff-devel \
    freetype-devel \
    lcms2-devel \
    libwebp-devel \
    tcl-devel \
    tk-devel \
    libxml2-devel \
    libxslt-devel \
    zlib-devel \
    bzip2-devel \
    readline-devel \
    sqlite-devel \
    xz-devel \
    expat-devel \
    gdbm-devel \
    ncurses-devel \
    libuuid-devel \
    python3-devel \
    && yum clean all

# Create symlinks for GCC 10 compilers
RUN ln -sf /usr/bin/gcc10-gcc /usr/bin/gcc10 && \
    ln -sf /usr/bin/gcc10-g++ /usr/bin/g++10

# Set environment variables to use GCC 10 for C++20 support
ENV CC=/usr/bin/gcc10
ENV CXX=/usr/bin/g++10

# Create cache directories
RUN mkdir -p /tmp/transformers_cache \
    /tmp/huggingface_cache \
    /tmp/huggingface_datasets_cache \
    /tmp/torch_cache \
    /tmp/sentence_transformers_cache \
    /tmp/docling_cache

# Install core Python dependencies
RUN pip install --upgrade pip==24.0 setuptools wheel

# Pre-install NumPy to prevent upgrades during ML package installation
RUN pip install --no-cache-dir numpy==1.26.4

# Basic dependencies (matched with requirements.txt)
RUN pip install --no-cache-dir \
    requests>=2.32.3 \
    python-dotenv>=1.0.1 \
    typing-extensions>=4.12.2 \
    pydantic>=2.9.0

# Install pandas after NumPy is locked
RUN pip install --no-cache-dir pandas>=2.2.2

# ML dependencies â€“ use prebuilt wheels where possible
RUN pip install --no-cache-dir --only-binary :all: \
    torch==2.1.0 \
    transformers==4.36.0 \
    sentence-transformers==2.2.2 || \
    pip install --no-cache-dir \
    torch==2.1.0 \
    transformers==4.36.0 \
    sentence-transformers==2.2.2

# Install TensorFlow separately
RUN pip install --no-cache-dir tensorflow==2.20.0

# Install sentencepiece - try prebuilt wheel first, fallback to build
RUN pip install --no-cache-dir sentencepiece==0.1.99 || \
    pip install --no-cache-dir --no-binary sentencepiece sentencepiece==0.1.99

# Install Docling with correct version constraint from requirements.txt
RUN pip install --no-cache-dir "docling>=1.3.0,<1.7.0"

# AWS and database clients (matched with requirements.txt)
RUN pip install --no-cache-dir \
    boto3>=1.35.0 \
    botocore>=1.35.0 \
    pinecone-client>=3.1.0 \
    neo4j>=5.24.0

# Remaining dependencies
RUN pip install --no-cache-dir \
    openai==1.12.0 \
    agents==1.4.0 \
    httpx==0.25.0 \
    orjson==3.9.10 \
    structlog==23.2.0

# Set environment variables before model download
ENV TRANSFORMERS_CACHE=/tmp/transformers_cache
ENV HF_HOME=/tmp/huggingface_cache
ENV HF_DATASETS_CACHE=/tmp/huggingface_datasets_cache
ENV TORCH_HOME=/tmp/torch_cache
ENV SENTENCE_TRANSFORMERS_HOME=/tmp/sentence_transformers_cache
ENV DOCLING_CACHE_DIR=/tmp/docling_cache

# Pre-download and cache all Docling models including OCR
RUN python -c "\
import os; \
try: \
    from docling.document_converter import DocumentConverter; \
    from docling.datamodel.base_models import InputFormat; \
    from docling.datamodel.pipeline_options import PdfPipelineOptions; \
    from docling.backend.pypdfium2_backend import PyPdfiumDocumentBackend; \
    print('Initializing Docling with OCR enabled...'); \
    pdf_options = PdfPipelineOptions(); \
    pdf_options.do_ocr = True; \
    pdf_options.do_table_structure = True; \
    pdf_options.table_structure_options.do_cell_matching = True; \
    converter = DocumentConverter( \
        format_options={InputFormat.PDF: pdf_options}, \
        backends=[PyPdfiumDocumentBackend()] \
    ); \
    print('Docling converter initialized successfully'); \
    print('OCR models and all dependencies pre-downloaded and cached'); \
except Exception as e: \
    print(f'Docling model download failed: {e}'); \
    import traceback; \
    traceback.print_exc(); \
"

# Copy application code
COPY agent-toolkit/ ${LAMBDA_TASK_ROOT}/

# Set the CMD to your handler
CMD ["lambda_handlers.lambda_handler_knowledge_document_ingestion"]