# Dockerfile.core
# Core runtime: Python 3.12 Lambda base with basic dependencies
FROM public.ecr.aws/lambda/python:3.12

LABEL maintainer="KnowledgeBot Team"
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PIP_DISABLE_PIP_VERSION_CHECK=1
ENV PIP_NO_CACHE_DIR=1

# Skip system dependencies - try with pre-compiled Python packages first
# Many packages have ARM64 wheels available that don't require compilation

# Upgrade pip and install core dependencies
RUN python -m pip install --upgrade pip setuptools wheel

# Install core Python packages
RUN python -m pip install --no-cache-dir \
    boto3>=1.34.0 \
    botocore>=1.34.0 \
    openai>=1.12.0 \
    openai-agents>=0.1.0 \
    pinecone-client>=3.1.0 \
    neo4j>=5.24.0 \
    httpx>=0.25.0 \
    orjson>=3.9.0 \
    structlog>=23.2.0 \
    pydantic>=2.5.0 \
    typing-extensions>=4.9.0

# Copy application code
COPY agent-toolkit/ ${LAMBDA_TASK_ROOT}/

# Add startup logging to debug entrypoint issues
RUN echo "#!/bin/bash" > /tmp/startup.sh && \
    echo "echo '=== CONTAINER STARTUP DEBUG ==='" >> /tmp/startup.sh && \
    echo "echo 'Current directory: \$(pwd)'" >> /tmp/startup.sh && \
    echo "echo 'Python version: \$(python --version)'" >> /tmp/startup.sh && \
    echo "echo 'Python path: \$(which python)'" >> /tmp/startup.sh && \
    echo "echo 'Files in current directory:'" >> /tmp/startup.sh && \
    echo "ls -la" >> /tmp/startup.sh && \
    echo "echo 'Files in /var/task:'" >> /tmp/startup.sh && \
    echo "ls -la /var/task/" >> /tmp/startup.sh && \
    echo "echo 'Testing Python import:'" >> /tmp/startup.sh && \
    echo "python -c 'import sys; print(\"Python path:\", sys.path)'" >> /tmp/startup.sh && \
    echo "echo 'Testing lambda_handlers import:'" >> /tmp/startup.sh && \
    echo "python -c 'try: import lambda_handlers; print(\"lambda_handlers imported successfully\"); except Exception as e: print(\"lambda_handlers import failed:\", str(e))'" >> /tmp/startup.sh && \
    echo "echo '=== STARTING LAMBDA HANDLER ==='" >> /tmp/startup.sh && \
    echo "exec python -m lambda_handlers.lambda_handler_knowledge_chat" >> /tmp/startup.sh && \
    chmod +x /tmp/startup.sh

# Set the ENTRYPOINT to our debug startup script
ENTRYPOINT ["/tmp/startup.sh"]
