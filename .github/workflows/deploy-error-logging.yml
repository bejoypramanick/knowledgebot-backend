name: Deploy Error Logging Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'error-logging-infrastructure.yml'
      - 'microservices/error-logger-handler.py'
      - 'microservices/error-query-handler.py'
      - 'utils/error_logger.py'
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: ap-south-1

jobs:
  deploy-error-logging:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set deployment stage
      id: set-stage
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "stage=${{ github.event.inputs.stage }}" >> $GITHUB_OUTPUT
        else
          echo "stage=prod" >> $GITHUB_OUTPUT
        fi

    - name: Deploy CloudFormation stack
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        STACK_NAME="knowledgebot-error-logging-${STAGE}"
        
        aws cloudformation deploy \
          --template-file error-logging-infrastructure.yml \
          --stack-name ${STACK_NAME} \
          --parameter-overrides StageName=${STAGE} \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }}

    - name: Package error-logger-handler
      run: |
        cd microservices
        zip -r error-logger-handler.zip error-logger-handler.py
        cd ..

    - name: Package error-query-handler
      run: |
        cd microservices
        zip -r error-query-handler.zip error-query-handler.py
        cd ..

    - name: Package error-logger utility
      run: |
        cd utils
        zip -r error-logger-utils.zip error_logger.py
        cd ..

    - name: Deploy error-logger Lambda
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        FUNCTION_NAME="${STAGE}-error-logger"
        
        aws lambda update-function-code \
          --function-name ${FUNCTION_NAME} \
          --zip-file fileb://microservices/error-logger-handler.zip \
          --region ${{ env.AWS_REGION }}

    - name: Deploy error-query Lambda
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        FUNCTION_NAME="${STAGE}-error-query"
        
        aws lambda update-function-code \
          --function-name ${FUNCTION_NAME} \
          --zip-file fileb://microservices/error-query-handler.zip \
          --region ${{ env.AWS_REGION }}

    - name: Update error-logger with utility
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        FUNCTION_NAME="${STAGE}-error-logger"
        
        # Create a combined package with both files
        cd microservices
        cp ../utils/error_logger.py .
        zip -r error-logger-combined.zip error-logger-handler.py error_logger.py
        cd ..
        
        aws lambda update-function-code \
          --function-name ${FUNCTION_NAME} \
          --zip-file fileb://microservices/error-logger-combined.zip \
          --region ${{ env.AWS_REGION }}

    - name: Get deployment outputs
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        STACK_NAME="knowledgebot-error-logging-${STAGE}"
        
        echo "ðŸ“‹ Deployment Outputs:"
        aws cloudformation describe-stacks \
          --stack-name ${STACK_NAME} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs' \
          --output table

    - name: Get API endpoints
      id: get-endpoints
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        STACK_NAME="knowledgebot-error-logging-${STAGE}"
        
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${STACK_NAME} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ErrorQueryApiUrl`].OutputValue' \
          --output text)
        
        echo "api_url=${API_URL}" >> $GITHUB_OUTPUT

    - name: Create CloudWatch Dashboard
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        DASHBOARD_NAME="KnowledgeBot-Error-Monitoring-${STAGE}"
        
        # Update dashboard JSON with correct stage
        sed "s/prod-error-logger/${STAGE}-error-logger/g" cloudwatch-dashboard.json > dashboard-${STAGE}.json
        
        # Create CloudWatch dashboard
        aws cloudwatch put-dashboard \
          --dashboard-name ${DASHBOARD_NAME} \
          --dashboard-body file://dashboard-${STAGE}.json \
          --region ${{ env.AWS_REGION }}
        
        echo "dashboard_name=${DASHBOARD_NAME}" >> $GITHUB_OUTPUT
        
        # Cleanup
        rm -f dashboard-${STAGE}.json

    - name: Cleanup
      run: |
        rm -f microservices/*.zip
        rm -f utils/*.zip

    - name: Deployment Summary
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        echo "âœ… Error logging infrastructure deployed successfully!"
        echo ""
        echo "ðŸ”— API Endpoints:"
        echo "  Error Query API: ${{ steps.get-endpoints.outputs.api_url }}/errors"
        echo ""
        echo "ðŸ“Š Monitoring:"
        echo "  CloudWatch Dashboard: KnowledgeBot-Error-Monitoring-${STAGE}"
        echo "  CloudWatch Logs: /aws/lambda/${STAGE}-error-logger"
        echo "  DynamoDB Table: ${STAGE}-knowledgebot-error-logs"
        echo "  CloudWatch Alarms: ${STAGE}-high-error-rate, ${STAGE}-critical-errors"
        echo ""
        echo "ðŸŽ¯ Next Steps:"
        echo "  1. Update your Lambda functions to use the error logger utility"
        echo "  2. Test the error logging system"
        echo "  3. Monitor errors in the CloudWatch dashboard"
        echo "  4. Set up email notifications for CloudWatch alarms if needed"
