name: Deploy Docker Lambda Functions

on:
  push:
    branches: [ main ]
    paths:
      - 'microservices/*-library-handler.py'
      - 'Dockerfile.*-library'
      - 'requirements-docker-lambdas.txt'
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: knowledgebot-lambdas

jobs:
  deploy-docker-lambdas:
    runs-on: ubuntu-latest
    environment: chatbot
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker images
      run: |
        # Get account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Library handlers to build
        declare -a LIBRARY_HANDLERS=(
          "docling-library"
          "pinecone-library" 
          "neo4j-library"
          "openai-library"
          "sentence-transformer-library"
        )
        
        for handler in "${LIBRARY_HANDLERS[@]}"; do
          echo "Building and pushing $handler..."
          
          # Build image
          docker build -f Dockerfile.$handler -t $handler .
          
          # Tag for ECR
          docker tag $handler:latest $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$handler-latest
          
          # Push to ECR
          docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$handler-latest
          
          echo "✅ $handler pushed successfully"
        done

    - name: Deploy Lambda functions
      run: |
        # Get account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Library handlers to deploy
        declare -a LIBRARY_HANDLERS=(
          "docling-library-handler"
          "pinecone-library-handler" 
          "neo4j-library-handler"
          "openai-library-handler"
          "sentence-transformer-library-handler"
        )
        
        for handler in "${LIBRARY_HANDLERS[@]}"; do
          echo "Deploying Lambda function: $handler"
          
          # Check if function exists
          if aws lambda get-function --function-name $handler --region $AWS_REGION >/dev/null 2>&1; then
            # Update existing function
            aws lambda update-function-code \
              --function-name $handler \
              --image-uri $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${handler%-handler}-library-latest \
              --region $AWS_REGION
            echo "✅ $handler updated successfully"
          else
            # Create new function
            aws lambda create-function \
              --function-name $handler \
              --package-type Image \
              --code ImageUri=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${handler%-handler}-library-latest \
              --role arn:aws:iam::$ACCOUNT_ID:role/lambda-execution-role \
              --timeout 900 \
              --memory-size 3008 \
              --region $AWS_REGION
            echo "✅ $handler created successfully"
          fi
        done

    - name: Clean up old images
      run: |
        # Get account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Clean up old images (keep last 5)
        aws ecr list-images \
          --repository-name $ECR_REPOSITORY \
          --region $AWS_REGION \
          --query 'imageIds[?imageTag!=`latest`]' \
          --output json | \
        jq '.[] | select(.imageTag | startswith("docling-library-") or startswith("pinecone-library-") or startswith("neo4j-library-") or startswith("openai-library-") or startswith("sentence-transformer-library-"))' | \
        jq -s 'sort_by(.imagePushedAt) | reverse | .[5:] | .[] | .imageDigest' | \
        xargs -I {} aws ecr batch-delete-image \
          --repository-name $ECR_REPOSITORY \
          --image-ids imageDigest={} \
          --region $AWS_REGION || true
