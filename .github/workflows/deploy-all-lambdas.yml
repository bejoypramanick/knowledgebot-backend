name: Deploy All Lambda Functions

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile.*'
      - 'requirements-*.txt'
      - 'microservices/*.py'
      - '.github/workflows/deploy-all-lambdas.yml'
  workflow_dispatch:

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: knowledgebot-lambdas

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      docling-changed: ${{ steps.changes.outputs.docling }}
      pinecone-changed: ${{ steps.changes.outputs.pinecone }}
      neo4j-changed: ${{ steps.changes.outputs.neo4j }}
      openai-changed: ${{ steps.changes.outputs.openai }}
      sentence-transformer-changed: ${{ steps.changes.outputs.sentence-transformer }}
      any-changed: ${{ steps.changes.outputs.any }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            docling:
              - 'Dockerfile.docling-library'
              - 'requirements-docling-library.txt'
              - 'microservices/docling-library-handler.py'
            pinecone:
              - 'Dockerfile.pinecone-library'
              - 'requirements-pinecone-library.txt'
              - 'microservices/pinecone-library-handler.py'
            neo4j:
              - 'Dockerfile.neo4j-library'
              - 'requirements-neo4j-library.txt'
              - 'microservices/neo4j-library-handler.py'
            openai:
              - 'Dockerfile.openai-library'
              - 'requirements-openai-library.txt'
              - 'microservices/openai-library-handler.py'
            sentence-transformer:
              - 'Dockerfile.sentence-transformer-library'
              - 'requirements-sentence-transformer-library.txt'
              - 'microservices/sentence-transformer-library-handler.py'
      
      - name: Show change summary
        run: |
          echo "📋 Change Detection Summary:"
          echo "================================"
          echo "Docling Library: ${{ steps.changes.outputs.docling }}"
          echo "Pinecone Library: ${{ steps.changes.outputs.pinecone }}"
          echo "Neo4j Library: ${{ steps.changes.outputs.neo4j }}"
          echo "OpenAI Library: ${{ steps.changes.outputs.openai }}"
          echo "Sentence Transformer Library: ${{ steps.changes.outputs.sentence-transformer }}"
          echo "================================"
          if [ "${{ steps.changes.outputs.any }}" == "true" ]; then
            echo "✅ Some libraries have changes, proceeding with build"
          else
            echo "⏭️ No library changes detected, skipping build"
          fi

  build-docker-images:
    needs: detect-changes
    runs-on: ubuntu-latest
    environment: chatbot
    if: needs.detect-changes.outputs.any-changed == 'true'
    strategy:
      matrix:
        include:
          - handler: docling-library
            function: docling-library-handler
            changed: ${{ needs.detect-changes.outputs.docling-changed }}
          - handler: pinecone-library
            function: pinecone-library-handler
            changed: ${{ needs.detect-changes.outputs.pinecone-changed }}
          - handler: neo4j-library
            function: neo4j-library-handler
            changed: ${{ needs.detect-changes.outputs.neo4j-changed }}
          - handler: openai-library
            function: openai-library-handler
            changed: ${{ needs.detect-changes.outputs.openai-changed }}
          - handler: sentence-transformer-library
            function: sentence-transformer-library-handler
            changed: ${{ needs.detect-changes.outputs.sentence-transformer-changed }}
    
    steps:
    - name: Check if ${{ matrix.handler }} has changes
      run: |
        if [ "${{ matrix.changed }}" == "true" ]; then
          echo "✅ ${{ matrix.handler }} has changes, proceeding with build"
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "⏭️ ${{ matrix.handler }} has no changes, skipping build"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
      id: check-changes

    - name: Checkout code
      if: steps.check-changes.outputs.changed == 'true'
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      if: steps.check-changes.outputs.changed == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.check-changes.outputs.changed == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository if it doesn't exist
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        # Get account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_REPO_NAME="$ECR_REPOSITORY"
        
        echo "🔍 Checking if ECR repository exists: $ECR_REPO_NAME"
        
        # Check if repository exists
        if aws ecr describe-repositories --repository-names "$ECR_REPO_NAME" --region $AWS_REGION >/dev/null 2>&1; then
          echo "✅ ECR repository $ECR_REPO_NAME already exists"
        else
          echo "📦 Creating ECR repository: $ECR_REPO_NAME"
          aws ecr create-repository \
            --repository-name "$ECR_REPO_NAME" \
            --region $AWS_REGION \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256
          echo "✅ ECR repository $ECR_REPO_NAME created successfully"
        fi

    - name: Ensure Lambda execution role exists
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        ROLE_NAME="lambda-execution-role"
        
        echo "🔍 Checking if Lambda execution role exists: $ROLE_NAME"
        
        # Check if role exists
        if aws iam get-role --role-name "$ROLE_NAME" --region $AWS_REGION >/dev/null 2>&1; then
          echo "✅ Lambda execution role $ROLE_NAME already exists"
        else
          echo "🔐 Creating Lambda execution role: $ROLE_NAME"
          
          # Create trust policy
          cat > trust-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF
          
          # Create role
          aws iam create-role \
            --role-name "$ROLE_NAME" \
            --assume-role-policy-document file://trust-policy.json \
            --region $AWS_REGION
          
          # Attach basic execution policy
          aws iam attach-role-policy \
            --role-name "$ROLE_NAME" \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole \
            --region $AWS_REGION
          
          # Attach additional policies for our use case
          aws iam attach-role-policy \
            --role-name "$ROLE_NAME" \
            --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess \
            --region $AWS_REGION || echo "S3 policy already attached"
          
          aws iam attach-role-policy \
            --role-name "$ROLE_NAME" \
            --policy-arn arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess \
            --region $AWS_REGION || echo "DynamoDB policy already attached"
          
          # Clean up
          rm -f trust-policy.json
          
          echo "✅ Lambda execution role $ROLE_NAME created successfully"
        fi

    - name: Build and push Docker image
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        # Get account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        echo "🏗️ Building ${{ matrix.handler }}..."
        
        # Build image
        docker build -f Dockerfile.${{ matrix.handler }} -t ${{ matrix.handler }} .
        
        # Tag for ECR
        docker tag ${{ matrix.handler }}:latest $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${{ matrix.handler }}-latest
        
        # Push to ECR
        docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${{ matrix.handler }}-latest
        
        echo "✅ ${{ matrix.handler }} pushed successfully"

    - name: Deploy Lambda function
      if: steps.check-changes.outputs.changed == 'true'
      run: |
        # Get account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        echo "🚀 Deploying ${{ matrix.function }}..."
        
        # Check if function exists
        if aws lambda get-function --function-name ${{ matrix.function }} --region $AWS_REGION >/dev/null 2>&1; then
          # Update existing function
          aws lambda update-function-code \
            --function-name ${{ matrix.function }} \
            --image-uri $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${{ matrix.handler }}-latest \
            --region $AWS_REGION
          echo "✅ ${{ matrix.function }} updated successfully"
        else
          # Create new function
          aws lambda create-function \
            --function-name ${{ matrix.function }} \
            --package-type Image \
            --code ImageUri=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:${{ matrix.handler }}-latest \
            --role arn:aws:iam::$ACCOUNT_ID:role/lambda-execution-role \
            --timeout 900 \
            --memory-size 3008 \
            --region $AWS_REGION
          echo "✅ ${{ matrix.function }} created successfully"
        fi

  deploy-zip-lambdas:
    needs: [detect-changes, build-docker-images]
    runs-on: ubuntu-latest
    environment: chatbot
    if: needs.detect-changes.outputs.any-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Deploy business logic Lambda functions
      run: |
        # Get account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        
        # Business logic handlers to deploy
        declare -a BUSINESS_HANDLERS=(
          "document-processor-business-logic"
          "chat-orchestrator-business-logic"
          "dynamodb-crud-handler"
          "s3-unified-handler"
        )
        
        for handler in "${BUSINESS_HANDLERS[@]}"; do
          echo "Creating deployment package for $handler..."
          
          # Create temporary directory
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          
          # Copy handler file
          cp ../microservices/$handler.py .
          
          # Install minimal dependencies for business logic
          pip install -r ../requirements-zip-lambdas.txt -t . --quiet
          
          # Create zip package
          zip -r $handler.zip . >/dev/null
          
          echo "Deploying Lambda function: $handler"
          
          # Check if function exists
          if aws lambda get-function --function-name $handler --region $AWS_REGION >/dev/null 2>&1; then
            # Update existing function
            aws lambda update-function-code \
              --function-name $handler \
              --zip-file fileb://$handler.zip \
              --region $AWS_REGION
            echo "✅ $handler updated successfully"
          else
            # Create new function
            aws lambda create-function \
              --function-name $handler \
              --runtime python3.11 \
              --role arn:aws:iam::$ACCOUNT_ID:role/lambda-execution-role \
              --handler $handler.lambda_handler \
              --zip-file fileb://$handler.zip \
              --timeout 900 \
              --memory-size 512 \
              --region $AWS_REGION
            echo "✅ $handler created successfully"
          fi
          
          # Clean up
          cd -
          rm -rf $TEMP_DIR
        done

    - name: Set environment variables for business logic functions
      run: |
        # Set environment variables for business logic functions to know which library functions to call
        declare -a BUSINESS_HANDLERS=(
          "document-processor-business-logic"
          "chat-orchestrator-business-logic"
        )
        
        for handler in "${BUSINESS_HANDLERS[@]}"; do
          echo "Setting environment variables for $handler..."
          
          aws lambda update-function-configuration \
            --function-name $handler \
            --environment Variables="{
              DOCLING_LIBRARY_FUNCTION=docling-library-handler,
              PINECONE_LIBRARY_FUNCTION=pinecone-library-handler,
              NEO4J_LIBRARY_FUNCTION=neo4j-library-handler,
              OPENAI_LIBRARY_FUNCTION=openai-library-handler,
              SENTENCE_TRANSFORMER_LIBRARY_FUNCTION=sentence-transformer-library-handler,
              CHUNKS_TABLE=document-chunks,
              PROCESSED_DOCUMENTS_BUCKET=processed-documents
            }" \
            --region $AWS_REGION || true
        done

  summary:
    needs: [build-docker-images, deploy-zip-lambdas]
    runs-on: ubuntu-latest
    environment: chatbot
    if: always()
    
    steps:
    - name: Deployment Summary
      run: |
        echo "🎉 Lambda Deployment Summary"
        echo "================================"
        echo ""
        echo "Docker Lambdas (Library Installations):"
        echo "  ✅ docling-library-handler"
        echo "  ✅ pinecone-library-handler"
        echo "  ✅ neo4j-library-handler"
        echo "  ✅ openai-library-handler"
        echo "  ✅ sentence-transformer-library-handler"
        echo ""
        echo "Zip Lambdas (Business Logic - Viewable in AWS Console):"
        echo "  ✅ document-processor-business-logic"
        echo "  ✅ chat-orchestrator-business-logic"
        echo "  ✅ dynamodb-crud-handler"
        echo "  ✅ s3-unified-handler"
        echo ""
        echo "💡 All business logic code is now viewable in AWS Lambda console!"
        echo "🔧 Library installations are handled by Docker Lambdas"
        echo "📝 All CRUD operations happen in Zip Lambdas"
