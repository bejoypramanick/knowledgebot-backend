name: Update Lambda Functions with Error Logging

on:
  push:
    branches: [main]
    paths:
      - 'microservices/*.py'
      - 'utils/error_logger.py'
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - prod
      lambda_function:
        description: 'Specific Lambda function to update (optional)'
        required: false
        type: string

env:
  AWS_REGION: ap-south-1

jobs:
  update-lambda-functions:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set deployment stage
      id: set-stage
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "stage=${{ github.event.inputs.stage }}" >> $GITHUB_OUTPUT
        else
          echo "stage=prod" >> $GITHUB_OUTPUT
        fi

    - name: List Lambda functions
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        echo "üîç Finding Lambda functions with stage: ${STAGE}"
        
        # List all Lambda functions that match the stage pattern
        aws lambda list-functions \
          --region ${{ env.AWS_REGION }} \
          --query 'Functions[?contains(FunctionName, `'${STAGE}'`)].FunctionName' \
          --output table

    - name: Update specific Lambda function
      if: github.event.inputs.lambda_function != ''
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        FUNCTION_NAME="${{ github.event.inputs.lambda_function }}"
        
        echo "üîß Updating specific Lambda function: ${FUNCTION_NAME}"
        
        # Find the corresponding Python file
        PYTHON_FILE=""
        if [[ "$FUNCTION_NAME" == *"chat-orchestrator"* ]]; then
          PYTHON_FILE="microservices/chat-orchestrator-websocket.py"
        elif [[ "$FUNCTION_NAME" == *"openai-library"* ]]; then
          PYTHON_FILE="microservices/openai-library-handler.py"
        elif [[ "$FUNCTION_NAME" == *"pinecone-library"* ]]; then
          PYTHON_FILE="microservices/pinecone-library-handler.py"
        elif [[ "$FUNCTION_NAME" == *"neo4j-library"* ]]; then
          PYTHON_FILE="microservices/neo4j-library-handler.py"
        elif [[ "$FUNCTION_NAME" == *"sentence-transformer"* ]]; then
          PYTHON_FILE="microservices/sentence-transformer-library-handler.py"
        else
          echo "‚ùå Unknown Lambda function: ${FUNCTION_NAME}"
          exit 1
        fi
        
        if [ -f "$PYTHON_FILE" ]; then
          echo "üì¶ Packaging ${PYTHON_FILE}..."
          
          # Create package with error logger utility
          cd microservices
          cp ../utils/error_logger.py .
          
          # Create zip file
          zip -r "${FUNCTION_NAME}.zip" "$(basename $PYTHON_FILE)" error_logger.py
          
          # Update Lambda function
          aws lambda update-function-code \
            --function-name ${FUNCTION_NAME} \
            --zip-file fileb://"${FUNCTION_NAME}.zip" \
            --region ${{ env.AWS_REGION }}
          
          # Cleanup
          rm -f "${FUNCTION_NAME}.zip" error_logger.py
          cd ..
          
          echo "‚úÖ Updated ${FUNCTION_NAME}"
        else
          echo "‚ùå Python file not found: ${PYTHON_FILE}"
          exit 1
        fi

    - name: Update all Lambda functions
      if: github.event.inputs.lambda_function == ''
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        
        echo "üîß Updating all Lambda functions with stage: ${STAGE}"
        
        # List of Lambda functions to update
        LAMBDA_FUNCTIONS=(
          "${STAGE}-chat-orchestrator-websocket"
          "${STAGE}-openai-library-handler"
          "${STAGE}-pinecone-library-handler"
          "${STAGE}-neo4j-library-handler"
          "${STAGE}-sentence-transformer-library-handler"
        )
        
        for FUNCTION_NAME in "${LAMBDA_FUNCTIONS[@]}"; do
          echo "üì¶ Processing ${FUNCTION_NAME}..."
          
          # Check if function exists
          if aws lambda get-function --function-name ${FUNCTION_NAME} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            # Find the corresponding Python file
            PYTHON_FILE=""
            if [[ "$FUNCTION_NAME" == *"chat-orchestrator"* ]]; then
              PYTHON_FILE="microservices/chat-orchestrator-websocket.py"
            elif [[ "$FUNCTION_NAME" == *"openai-library"* ]]; then
              PYTHON_FILE="microservices/openai-library-handler.py"
            elif [[ "$FUNCTION_NAME" == *"pinecone-library"* ]]; then
              PYTHON_FILE="microservices/pinecone-library-handler.py"
            elif [[ "$FUNCTION_NAME" == *"neo4j-library"* ]]; then
              PYTHON_FILE="microservices/neo4j-library-handler.py"
            elif [[ "$FUNCTION_NAME" == *"sentence-transformer"* ]]; then
              PYTHON_FILE="microservices/sentence-transformer-library-handler.py"
            fi
            
            if [ -f "$PYTHON_FILE" ]; then
              echo "  üì¶ Packaging ${PYTHON_FILE}..."
              
              # Create package with error logger utility
              cd microservices
              cp ../utils/error_logger.py .
              
              # Create zip file
              zip -r "${FUNCTION_NAME}.zip" "$(basename $PYTHON_FILE)" error_logger.py
              
              # Update Lambda function
              aws lambda update-function-code \
                --function-name ${FUNCTION_NAME} \
                --zip-file fileb://"${FUNCTION_NAME}.zip" \
                --region ${{ env.AWS_REGION }}
              
              # Cleanup
              rm -f "${FUNCTION_NAME}.zip" error_logger.py
              cd ..
              
              echo "  ‚úÖ Updated ${FUNCTION_NAME}"
            else
              echo "  ‚ö†Ô∏è Python file not found: ${PYTHON_FILE}"
            fi
          else
            echo "  ‚ö†Ô∏è Lambda function not found: ${FUNCTION_NAME}"
          fi
        done

    - name: Cleanup
      run: |
        rm -f microservices/*.zip
        rm -f utils/*.zip

    - name: Update Summary
      run: |
        STAGE=${{ steps.set-stage.outputs.stage }}
        echo "‚úÖ Lambda functions updated with error logging!"
        echo ""
        echo "üìä Updated functions:"
        echo "  - ${STAGE}-chat-orchestrator-websocket"
        echo "  - ${STAGE}-openai-library-handler"
        echo "  - ${STAGE}-pinecone-library-handler"
        echo "  - ${STAGE}-neo4j-library-handler"
        echo "  - ${STAGE}-sentence-transformer-library-handler"
        echo ""
        echo "üéØ Next Steps:"
        echo "  1. Test the error logging in your Lambda functions"
        echo "  2. Check the error logs in DynamoDB and CloudWatch"
        echo "  3. Set up monitoring and alerts"
