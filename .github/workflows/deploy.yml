name: Build DynamoDB MCP Server Docker Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: 090163643302.dkr.ecr.ap-south-1.amazonaws.com

jobs:
  # Setup job - runs first
  setup:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: chatbot
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository for DynamoDB MCP
      run: |
        # Create ECR repository for DynamoDB MCP server only
        aws ecr create-repository --repository-name knowledgebot-dynamodb-mcp --region ${{ env.AWS_REGION }} || echo "Repository already exists"
        
        # Set lifecycle policy to keep only latest 10 images
        aws ecr put-lifecycle-policy --repository-name knowledgebot-dynamodb-mcp --lifecycle-policy-text '{"rules":[{"rulePriority":1,"description":"Keep last 2 images","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":2},"action":{"type":"expire"}}]}' --region ${{ env.AWS_REGION }} || echo "Lifecycle policy already set"

  # DynamoDB Docker build only - other builds temporarily disabled
  build-mcp-servers:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: chatbot
    strategy:
      matrix:
        include:
          - name: dynamodb
            dockerfile: Dockerfile.dynamodb-mcp
            repository: knowledgebot-dynamodb-mcp
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push ${{ matrix.name }} MCP server image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./${{ matrix.dockerfile }}
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ matrix.repository }}:${{ github.sha }}
          ${{ env.ECR_REGISTRY }}/${{ matrix.repository }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Image build completion notification
  notify-build-complete:
    runs-on: ubuntu-latest
    needs: [setup, build-mcp-servers]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: chatbot
    
    steps:
    - name: Notify build completion
      run: |
        echo "‚úÖ DynamoDB MCP Server Docker image built successfully!"
        echo ""
        echo "üèóÔ∏è Image Details:"
        echo "- Repository: ${{ env.ECR_REGISTRY }}/knowledgebot-dynamodb-mcp"
        echo "- Tags: ${{ github.sha }}, latest"
        echo ""
        echo "üì¶ Image is ready for external deployment!"
        echo "üîó ECR Registry: ${{ env.ECR_REGISTRY }}"
        echo "üìã Repository: knowledgebot-dynamodb-mcp"
        echo ""
        echo "üí° To pull the image:"
        echo "docker pull ${{ env.ECR_REGISTRY }}/knowledgebot-dynamodb-mcp:latest"
