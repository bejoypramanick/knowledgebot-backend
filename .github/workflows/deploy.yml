name: Deploy KnowledgeBot Backend - Parallel Build

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/deploy.yml'
      - 'Dockerfile.*'
      - 'agent-toolkit/**'
      - 'requirements*.txt'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/deploy.yml'
      - 'Dockerfile.*'
      - 'agent-toolkit/**'
      - 'requirements*.txt'

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: knowledgebot-backend

jobs:
  # Job 1: Setup Infrastructure
  setup-infrastructure:
    runs-on: ubuntu-latest
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository
      run: |
        echo "üì¶ Creating ECR repository..."
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

  # Job 2: Build Core Dependencies Image (Parallel)
  build-core:
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for core-related changes
      id: core-filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          core:
            - 'Dockerfile.core'
            - 'requirements-basic.txt'
            - 'agent-toolkit/**'

    - name: Configure AWS credentials
      if: steps.core-filter.outputs.core == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.core-filter.outputs.core == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push core image
      if: steps.core-filter.outputs.core == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building core dependencies image..."
        docker build -f Dockerfile.core -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:core-$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:core-$IMAGE_TAG
        echo "‚úÖ Core image built and pushed successfully"

    - name: Skip core build
      if: steps.core-filter.outputs.core == 'false'
      run: echo "‚è≠Ô∏è No core-related changes detected. Skipping core build."

  # Job 3: Build Docling Image (Parallel)
  build-docling:
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for docling-related changes
      id: docling-filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          docling:
            - 'Dockerfile.docling'
            - 'agent-toolkit/**'

    - name: Configure AWS credentials
      if: steps.docling-filter.outputs.docling == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.docling-filter.outputs.docling == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push docling image
      if: steps.docling-filter.outputs.docling == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building Docling image..."
        docker build -f Dockerfile.docling -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:docling-$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:docling-$IMAGE_TAG
        echo "‚úÖ Docling image built and pushed successfully"

    - name: Skip docling build
      if: steps.docling-filter.outputs.docling == 'false'
      run: echo "‚è≠Ô∏è No docling-related changes detected. Skipping docling build."

  # Job 4: Build Final Application Image (Sequential - after core and docling)
  build-final:
    runs-on: ubuntu-latest
    needs: [setup-infrastructure, build-core, build-docling]
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for final-related changes
      id: final-filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          final:
            - 'Dockerfile.final'
            - 'requirements.txt'
            - 'agent-toolkit/**'

    - name: Configure AWS credentials
      if: steps.final-filter.outputs.final == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.final-filter.outputs.final == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push final image
      if: steps.final-filter.outputs.final == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building final application image..."
        docker build -f Dockerfile.final -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:final-$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:final-$IMAGE_TAG
        echo "‚úÖ Final image built and pushed successfully"

    - name: Skip final build
      if: steps.final-filter.outputs.final == 'false'
      run: echo "‚è≠Ô∏è No final-related changes detected. Skipping final build."

  # Job 5: Deploy to Lambda (Depends on all builds)
  deploy:
    runs-on: ubuntu-latest
    needs: [setup-infrastructure, build-core, build-docling, build-final]
    if: |
      always() &&
      (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped') &&
      (needs.build-core.result == 'success' ||
       needs.build-docling.result == 'success' ||
       needs.build-final.result == 'success')
    environment: chatbot

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for deployment-related changes
      id: deploy-filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          deploy:
            - '.github/workflows/deploy.yml'
            - 'Dockerfile.*'
            - 'requirements*.txt'
            - 'agent-toolkit/**'

    - name: Configure AWS credentials
      if: steps.deploy-filter.outputs.deploy == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.deploy-filter.outputs.deploy == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Deploy Lambda functions
      if: steps.deploy-filter.outputs.deploy == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
        PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME }}
        PINECONE_HOST: ${{ secrets.PINECONE_HOST }}
        PINECONE_DIMENSIONS: ${{ secrets.PINECONE_DIMENSIONS }}
        DOCUMENTS_BUCKET: ${{ secrets.DOCUMENTS_BUCKET }}
      run: |
        echo "üöÄ Deploying Lambda functions..."

        # Check which images are available (use latest if current commit not found)
        FINAL_BUILT=false
        DOCLING_BUILT=false
        FINAL_IMAGE_TAG=""
        DOCLING_IMAGE_TAG=""

        # Check for final image (current commit first, then latest)
        if aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=final-$IMAGE_TAG --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          FINAL_BUILT=true
          FINAL_IMAGE_TAG="final-$IMAGE_TAG"
          echo "‚úÖ Final image found: final-$IMAGE_TAG"
        else
          # Look for latest final image
          LATEST_FINAL=$(aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} --query 'imageDetails[].imageTags[]' --output text | tr '\t' '\n' | grep final | head -1)
          if [ -n "$LATEST_FINAL" ]; then
            FINAL_BUILT=true
            FINAL_IMAGE_TAG="$LATEST_FINAL"
            echo "‚úÖ Using latest final image: $LATEST_FINAL"
          else
            echo "‚è≠Ô∏è No final image found"
          fi
        fi

        # Check for docling image (current commit first, then latest)
        if aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --image-ids imageTag=docling-$IMAGE_TAG --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          DOCLING_BUILT=true
          DOCLING_IMAGE_TAG="docling-$IMAGE_TAG"
          echo "‚úÖ Docling image found: docling-$IMAGE_TAG"
        else
          # Look for latest docling image
          LATEST_DOCLING=$(aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} --query 'imageDetails[].imageTags[]' --output text | tr '\t' '\n' | grep docling | head -1)
          if [ -n "$LATEST_DOCLING" ]; then
            DOCLING_BUILT=true
            DOCLING_IMAGE_TAG="$LATEST_DOCLING"
            echo "‚úÖ Using latest docling image: $LATEST_DOCLING"
          else
            echo "‚è≠Ô∏è No docling image found"
          fi
        fi

        # Deploy knowledgebot-chat if final image was built
        if [ "$FINAL_BUILT" = true ]; then
          if aws lambda get-function --function-name knowledgebot-chat --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "üìù Updating existing knowledgebot-chat function..."
            aws lambda update-function-code \
              --function-name knowledgebot-chat \
              --image-uri $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$FINAL_IMAGE_TAG \
              --region ${{ env.AWS_REGION }}
          else
            echo "üÜï Creating knowledgebot-chat function..."
            aws lambda create-function \
              --function-name knowledgebot-chat \
              --package-type Image \
              --code ImageUri=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$FINAL_IMAGE_TAG \
              --architectures arm64 \
              --role arn:aws:iam::090163643302:role/chatbot-agent-lambda-role \
              --region ${{ env.AWS_REGION }} \
              --timeout 300 \
              --memory-size 2048
          fi
        else
          echo "‚è≠Ô∏è Skipping knowledgebot-chat deployment (no final image)"
        fi

        # Deploy knowledgebot-document-ingestion if docling image was built
        if [ "$DOCLING_BUILT" = true ]; then
          if aws lambda get-function --function-name knowledgebot-document-ingestion --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
            echo "üìù Updating existing knowledgebot-document-ingestion function..."
            aws lambda update-function-code \
              --function-name knowledgebot-document-ingestion \
              --image-uri $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$DOCLING_IMAGE_TAG \
              --region ${{ env.AWS_REGION }}
          else
            echo "üÜï Creating knowledgebot-document-ingestion function..."
            aws lambda create-function \
              --function-name knowledgebot-document-ingestion \
              --package-type Image \
              --code ImageUri=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$DOCLING_IMAGE_TAG \
              --architectures arm64 \
              --role arn:aws:iam::090163643302:role/chatbot-agent-lambda-role \
              --region ${{ env.AWS_REGION }} \
              --timeout 900 \
              --memory-size 3008
          fi
        else
          echo "‚è≠Ô∏è Skipping knowledgebot-document-ingestion deployment (no docling image)"
        fi

        # Wait for Lambda functions to be ready before setting environment variables
        echo "‚è≥ Waiting for Lambda functions to be ready..."
        
        # Wait for knowledgebot-chat to be ready
        if [ "$FINAL_BUILT" = true ]; then
          echo "‚è≥ Waiting for knowledgebot-chat to be ready..."
          while true; do
            STATUS=$(aws lambda get-function --function-name knowledgebot-chat --region ${{ env.AWS_REGION }} --query 'Configuration.LastUpdateStatus' --output text 2>/dev/null || echo "NotFound")
            if [ "$STATUS" = "Successful" ]; then
              echo "‚úÖ knowledgebot-chat is ready"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "‚ùå knowledgebot-chat update failed"
              break
            else
              echo "‚è≥ knowledgebot-chat status: $STATUS, waiting..."
              sleep 10
            fi
          done
        fi

        # Wait for knowledgebot-document-ingestion to be ready
        if [ "$DOCLING_BUILT" = true ]; then
          echo "‚è≥ Waiting for knowledgebot-document-ingestion to be ready..."
          while true; do
            STATUS=$(aws lambda get-function --function-name knowledgebot-document-ingestion --region ${{ env.AWS_REGION }} --query 'Configuration.LastUpdateStatus' --output text 2>/dev/null || echo "NotFound")
            if [ "$STATUS" = "Successful" ]; then
              echo "‚úÖ knowledgebot-document-ingestion is ready"
              break
            elif [ "$STATUS" = "Failed" ]; then
              echo "‚ùå knowledgebot-document-ingestion update failed"
              break
            else
              echo "‚è≥ knowledgebot-document-ingestion status: $STATUS, waiting..."
              sleep 10
            fi
          done
        fi

        # Set environment variables for deployed functions
        echo "üîß Configuring environment variables..."

        # Set environment variables for knowledgebot-chat
        if [ "$FINAL_BUILT" = true ]; then
          aws lambda update-function-configuration \
            --function-name knowledgebot-chat \
            --environment "Variables={
              OPENAI_API_KEY='$OPENAI_API_KEY',
              PINECONE_API_KEY='$PINECONE_API_KEY',
              PINECONE_ENVIRONMENT='$PINECONE_ENVIRONMENT',
              PINECONE_INDEX_NAME='$PINECONE_INDEX_NAME',
              PINECONE_HOST='$PINECONE_HOST',
              PINECONE_DIMENSIONS='$PINECONE_DIMENSIONS'
            }" \
            --region ${{ env.AWS_REGION }}
          echo "‚úÖ Environment variables set for knowledgebot-chat"
        fi

        # Set environment variables for knowledgebot-document-ingestion
        if [ "$DOCLING_BUILT" = true ]; then
          aws lambda update-function-configuration \
            --function-name knowledgebot-document-ingestion \
            --environment "Variables={
              PINECONE_API_KEY='$PINECONE_API_KEY',
              PINECONE_ENVIRONMENT='$PINECONE_ENVIRONMENT',
              PINECONE_INDEX_NAME='$PINECONE_INDEX_NAME',
              PINECONE_HOST='$PINECONE_HOST',
              PINECONE_DIMENSIONS='$PINECONE_DIMENSIONS',
              DOCUMENTS_BUCKET='$DOCUMENTS_BUCKET'
            }" \
            --region ${{ env.AWS_REGION }}
          echo "‚úÖ Environment variables set for knowledgebot-document-ingestion"
        fi

        echo "‚úÖ Lambda functions deployed and configured successfully"

    - name: Skip deployment
      if: steps.deploy-filter.outputs.deploy == 'false'
      run: echo "‚è≠Ô∏è No deployment-related changes detected. Skipping deployment."
