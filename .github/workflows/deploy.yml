name: Deploy KnowledgeBot Backend - Clean MCP Architecture

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: 090163643302.dkr.ecr.ap-south-1.amazonaws.com

jobs:
  # Setup job - runs first
  setup:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: chatbot
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository for DynamoDB MCP
      run: |
        # Create ECR repository for DynamoDB MCP server only
        aws ecr create-repository --repository-name knowledgebot-dynamodb-mcp --region ${{ env.AWS_REGION }} || echo "Repository already exists"
        
        # Set lifecycle policy to keep only latest 10 images
        aws ecr put-lifecycle-policy --repository-name knowledgebot-dynamodb-mcp --lifecycle-policy-text '{"rules":[{"rulePriority":1,"description":"Keep last 2 images","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":2},"action":{"type":"expire"}}]}' --region ${{ env.AWS_REGION }} || echo "Lifecycle policy already set"

  # DynamoDB Docker build only - other builds temporarily disabled
  build-mcp-servers:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: chatbot
    strategy:
      matrix:
        include:
          - name: dynamodb
            dockerfile: Dockerfile.dynamodb-mcp
            repository: knowledgebot-dynamodb-mcp
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push ${{ matrix.name }} MCP server image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./${{ matrix.dockerfile }}
        push: true
        tags: |
          ${{ env.ECR_REGISTRY }}/${{ matrix.repository }}:${{ github.sha }}
          ${{ env.ECR_REGISTRY }}/${{ matrix.repository }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Main deployment job - runs after all builds complete
  deploy-mcp-architecture:
    runs-on: ubuntu-latest
    needs: [setup, build-mcp-servers]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: chatbot
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || env.AWS_REGION }}

    - name: Create IAM role for Lambda execution
      run: |
        # Create IAM role for Lambda execution
        aws iam create-role \
          --role-name mcp-lambda-execution-role \
          --assume-role-policy-document '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }' || echo "Role already exists"
        
        # Attach basic execution policy
        aws iam attach-role-policy \
          --role-name mcp-lambda-execution-role \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole || echo "Policy already attached"

    # Deploy DynamoDB MCP server Lambda function only
    - name: Deploy DynamoDB MCP server Lambda function
      run: |
        aws lambda update-function-code \
          --function-name dynamodb-mcp-server \
          --image-uri ${{ env.ECR_REGISTRY }}/knowledgebot-dynamodb-mcp:${{ github.sha }} \
          --region ${{ env.AWS_REGION }} || \
        aws lambda create-function \
          --function-name dynamodb-mcp-server \
          --package-type Image \
          --code ImageUri=${{ env.ECR_REGISTRY }}/knowledgebot-dynamodb-mcp:${{ github.sha }} \
          --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/mcp-lambda-execution-role \
          --timeout 900 \
          --memory-size 1024 \
          --region ${{ env.AWS_REGION }}

    # Configure DynamoDB MCP server
    - name: Create Function URL for DynamoDB MCP server
      run: |
        aws lambda create-function-url-config \
          --function-name dynamodb-mcp-server \
          --auth-type NONE \
          --region ${{ env.AWS_REGION }} || \
        aws lambda update-function-url-config \
          --function-name dynamodb-mcp-server \
          --auth-type NONE \
          --region ${{ env.AWS_REGION }}

    - name: Update DynamoDB MCP server environment variables
      run: |
        aws lambda update-function-configuration \
          --function-name dynamodb-mcp-server \
          --environment Variables='{
            "AWS_ACCESS_KEY_ID":"${{ secrets.AWS_ACCESS_KEY_ID }}",
            "AWS_SECRET_ACCESS_KEY":"${{ secrets.AWS_SECRET_ACCESS_KEY }}",
            "AWS_REGION":"${{ env.AWS_REGION }}"
          }' \
          --region ${{ env.AWS_REGION }}


    - name: Notify deployment status
      run: |
        echo "‚úÖ DynamoDB MCP Server deployed successfully!"
        echo ""
        echo "üèóÔ∏è MCP Architecture:"
        echo "- DynamoDB MCP Server (Database operations)"
        echo ""
        echo "üîó Function URL: Check AWS Lambda console for the DynamoDB MCP server URL"
