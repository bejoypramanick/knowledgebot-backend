name: Deploy KnowledgeBot Backend

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'ap-south-1' }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY || 'knowledgebot-backend' }}
  S3_BUCKET: ${{ secrets.S3_BUCKET || 'chatbot-storage-ap-south-1' }}
  DYNAMODB_TABLE: ${{ secrets.DYNAMODB_TABLE || 'chatbot-knowledge-base-metadata' }}
  KNOWLEDGE_BASE_TABLE: ${{ secrets.KNOWLEDGE_BASE_TABLE || 'chatbot-knowledge-base' }}
  CONVERSATIONS_TABLE: ${{ secrets.CONVERSATIONS_TABLE || 'chatbot-conversations' }}
  DOCUMENTS_BUCKET: ${{ secrets.DOCUMENTS_BUCKET || 'chatbot-documents-ap-south-1' }}
  EMBEDDINGS_BUCKET: ${{ secrets.EMBEDDINGS_BUCKET || 'chatbot-embeddings-ap-south-1' }}

jobs:
  setup-infrastructure:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create S3 bucket
      run: |
        echo "📦 Creating S3 bucket..."
        aws s3 mb s3://${{ env.S3_BUCKET }} --region ${{ env.AWS_REGION }} || echo "Bucket already exists"

    - name: Configure S3 CORS policy
      run: |
        echo "🔧 Setting up S3 CORS policy..."
        aws s3api put-bucket-cors \
          --bucket ${{ env.S3_BUCKET }} \
          --cors-configuration '{
              "CORSRules": [
                  {
                      "AllowedHeaders": ["*"],
                      "AllowedMethods": ["GET", "PUT", "POST", "DELETE", "HEAD"],
                      "AllowedOrigins": [
                          "http://localhost:3000",
                          "http://localhost:5173", 
                          "http://localhost:8081"
                      ],
                      "ExposeHeaders": [
                          "x-amz-meta-author",
                          "x-amz-meta-category", 
                          "x-amz-meta-tags",
                          "x-amz-meta-document_id",
                          "x-amz-meta-original_filename",
                          "x-amz-meta-title",
                          "x-amz-meta-upload_timestamp"
                      ],
                      "MaxAgeSeconds": 3600
                  }
              ]
          }' \
          --region ${{ env.AWS_REGION }}

    - name: Create DynamoDB table
      run: |
        echo "🗄️ Creating DynamoDB table..."
        aws dynamodb create-table \
          --table-name ${{ env.DYNAMODB_TABLE }} \
          --attribute-definitions \
            AttributeName=document_id,AttributeType=S \
          --key-schema \
            AttributeName=document_id,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST \
          --region ${{ env.AWS_REGION }} || echo "Table already exists"

    - name: Wait for table to be active
      run: |
        echo "⏳ Waiting for DynamoDB table to be active..."
        aws dynamodb wait table-exists --table-name ${{ env.DYNAMODB_TABLE }} --region ${{ env.AWS_REGION }}

    - name: Create IAM role for Lambda
      run: |
        echo "🔐 Creating IAM role for Lambda..."
        
        # Create trust policy
        cat > trust-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
        EOF
        
        # Create the role
        aws iam create-role \
          --role-name chatbot-lambda-role \
          --assume-role-policy-document file://trust-policy.json \
          --region ${{ env.AWS_REGION }} || echo "Role already exists"

    - name: Attach policies to Lambda role
      run: |
        echo "📋 Attaching policies to Lambda role..."
        
        # Attach basic execution role
        aws iam attach-role-policy \
          --role-name chatbot-lambda-role \
          --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole \
          --region ${{ env.AWS_REGION }} || echo "Policy already attached"
        
        # Create and attach custom policy
        cat > lambda-custom-policy.json << EOF
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:GetObject",
                "s3:PutObject",
                "s3:DeleteObject",
                "s3:ListBucket"
              ],
              "Resource": [
                "arn:aws:s3:::${{ env.S3_BUCKET }}",
                "arn:aws:s3:::${{ env.S3_BUCKET }}/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:Query",
                "dynamodb:Scan"
              ],
              "Resource": "arn:aws:dynamodb:${{ env.AWS_REGION }}:*:table/${{ env.DYNAMODB_TABLE }}"
            },
            {
              "Effect": "Allow",
              "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage"
              ],
              "Resource": "*"
            }
          ]
        }
        EOF
        
        aws iam put-role-policy \
          --role-name chatbot-lambda-role \
          --policy-name chatbot-lambda-custom-policy \
          --policy-document file://lambda-custom-policy.json \
          --region ${{ env.AWS_REGION }}

  deploy:
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./agent-toolkit
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create ECR repository if not exists
      run: |
        echo "📦 Ensuring ECR repository exists..."
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

    - name: Deploy Lambda functions
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "⚡ Deploying Lambda functions..."
        
        # Get account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ROLE_ARN="arn:aws:iam::${ACCOUNT_ID}:role/chatbot-lambda-role"
        
        # Create environment variables for Lambda
        cat > lambda-env-vars.json << EOF
        {
          "Variables": {
            "AWS_REGION": "${{ env.AWS_REGION }}",
            "S3_BUCKET": "${{ env.S3_BUCKET }}",
            "DYNAMODB_TABLE": "${{ env.DYNAMODB_TABLE }}",
            "KNOWLEDGE_BASE_TABLE": "${{ env.KNOWLEDGE_BASE_TABLE }}",
            "CONVERSATIONS_TABLE": "${{ env.CONVERSATIONS_TABLE }}",
            "DOCUMENTS_BUCKET": "${{ env.DOCUMENTS_BUCKET }}",
            "EMBEDDINGS_BUCKET": "${{ env.EMBEDDINGS_BUCKET }}",
            "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY }}",
            "PINECONE_API_KEY": "${{ secrets.PINECONE_API_KEY }}",
            "PINECONE_ENVIRONMENT": "${{ secrets.PINECONE_ENVIRONMENT }}",
            "PINECONE_INDEX_NAME": "${{ secrets.PINECONE_INDEX_NAME }}",
            "NEO4J_URI": "${{ secrets.NEO4J_URI }}",
            "NEO4J_USER": "${{ secrets.NEO4J_USER }}",
            "NEO4J_PASSWORD": "${{ secrets.NEO4J_PASSWORD }}",
            "SENTENCE_TRANSFORMERS_HOME": "/tmp/sentence_transformers_cache",
            "TRANSFORMERS_CACHE": "/tmp/transformers_cache",
            "HF_HOME": "/tmp/huggingface_cache"
          }
        }
        EOF

        # Create or update chat agent Lambda
        aws lambda create-function \
          --function-name chatbot-chat-agent \
          --package-type Image \
          --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --role $ROLE_ARN \
          --timeout 300 \
          --memory-size 1024 \
          --environment file://lambda-env-vars.json \
          --region ${{ env.AWS_REGION }} || \
        aws lambda update-function-code \
          --function-name chatbot-chat-agent \
          --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --region ${{ env.AWS_REGION }}
        
        # Update chat agent environment variables
        aws lambda update-function-configuration \
          --function-name chatbot-chat-agent \
          --environment file://lambda-env-vars.json \
          --region ${{ env.AWS_REGION }} || echo "Environment update skipped"
        
        # Create or update document agent Lambda
        aws lambda create-function \
          --function-name chatbot-document-agent \
          --package-type Image \
          --code ImageUri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --role $ROLE_ARN \
          --timeout 300 \
          --memory-size 1024 \
          --environment file://lambda-env-vars.json \
          --region ${{ env.AWS_REGION }} || \
        aws lambda update-function-code \
          --function-name chatbot-document-agent \
          --image-uri $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --region ${{ env.AWS_REGION }}
        
        # Update document agent environment variables
        aws lambda update-function-configuration \
          --function-name chatbot-document-agent \
          --environment file://lambda-env-vars.json \
          --region ${{ env.AWS_REGION }} || echo "Environment update skipped"

    - name: Setup S3 notifications
      run: |
        echo "🔔 Setting up S3 notifications..."
        
        # Get Lambda function ARN
        LAMBDA_ARN=$(aws lambda get-function --function-name chatbot-document-agent --region ${{ env.AWS_REGION }} --query 'Configuration.FunctionArn' --output text)
        
        # Add permission for S3 to invoke Lambda
        aws lambda add-permission \
          --function-name chatbot-document-agent \
          --principal s3.amazonaws.com \
          --action lambda:InvokeFunction \
          --source-arn "arn:aws:s3:::${{ env.S3_BUCKET }}" \
          --statement-id s3-trigger-$(date +%s) \
          --region ${{ env.AWS_REGION }} || echo "Permission already exists"
        
        # Configure S3 bucket notification
        cat > notification-config.json << EOF
        {
          "LambdaConfigurations": [
            {
              "Id": "DocumentProcessingTrigger",
              "LambdaFunctionArn": "$LAMBDA_ARN",
              "Events": ["s3:ObjectCreated:*"],
              "Filter": {
                "Key": {
                  "FilterRules": [
                    {
                      "Name": "suffix",
                      "Value": ".pdf"
                    }
                  ]
                }
              }
            }
          ]
        }
        EOF
        
        aws s3api put-bucket-notification-configuration \
          --bucket ${{ env.S3_BUCKET }} \
          --notification-configuration file://notification-config.json \
          --region ${{ env.AWS_REGION }}

    - name: Populate metadata table
      run: |
        echo "📊 Populating metadata table with sample data..."
        
        # Create sample document entry
        aws dynamodb put-item \
          --table-name ${{ env.DYNAMODB_TABLE }} \
          --item '{
            "document_id": {"S": "sample-document"},
            "original_filename": {"S": "sample.pdf"},
            "s3_key": {"S": "documents/sample.pdf"},
            "s3_bucket": {"S": "${{ env.S3_BUCKET }}"},
            "s3_download_url": {"S": "https://${{ env.S3_BUCKET }}.s3.${{ env.AWS_REGION }}.amazonaws.com/documents/sample.pdf"},
            "content_type": {"S": "application/pdf"},
            "status": {"S": "uploaded"},
            "uploaded_at": {"S": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"},
            "metadata": {
              "M": {
                "title": {"S": "Sample Document"},
                "author": {"S": "System"},
                "category": {"S": "sample"},
                "tags": {"L": [{"S": "sample"}, {"S": "test"}]}
              }
            }
          }' \
          --region ${{ env.AWS_REGION }} || echo "Sample data already exists"

    - name: Wait for deployment
      run: |
        echo "⏳ Waiting for Lambda functions to be ready..."
        sleep 30

    - name: Test deployment
      run: |
        echo "✅ Deployment completed successfully!"
        echo "🐳 Image: ${{ steps.build-image.outputs.image }}"
        echo "📦 S3 Bucket: ${{ env.S3_BUCKET }}"
        echo "🗄️ DynamoDB Table: ${{ env.DYNAMODB_TABLE }}"
        echo "⚡ Lambda Functions: chatbot-chat-agent, chatbot-document-agent"