name: Deploy KnowledgeBot Backend - Parallel Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: knowledgebot-backend

jobs:
  # Job 1: Setup Infrastructure
  setup-infrastructure:
    runs-on: ubuntu-latest
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository
      run: |
        echo "üì¶ Creating ECR repository..."
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

  # Job 2: Build Core Dependencies Image (Parallel)
  build-core:
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push core image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building core dependencies image..."
        docker build -f Dockerfile.core -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:core-$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:core-$IMAGE_TAG
        echo "‚úÖ Core image built and pushed successfully"

  # Job 3: Build Docling Image (Parallel)
  build-docling:
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push docling image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building Docling image..."
        docker build -f Dockerfile.docling -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:docling-$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:docling-$IMAGE_TAG
        echo "‚úÖ Docling image built and pushed successfully"

  # Job 4: Build Final Application Image (Sequential - after core and docling)
  build-final:
    runs-on: ubuntu-latest
    needs: [setup-infrastructure, build-core, build-docling]
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push final image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building final application image..."
        docker build -f Dockerfile.final -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:final-$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:final-$IMAGE_TAG
        echo "‚úÖ Final image built and pushed successfully"

  # Job 5: Deploy to Lambda (Depends on all builds)
  deploy:
    runs-on: ubuntu-latest
    needs: [setup-infrastructure, build-core, build-docling, build-final]
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Deploy Lambda functions
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üöÄ Deploying Lambda functions..."

        # Function: knowledgebot-chat (Main chat functionality)
        if aws lambda get-function --function-name knowledgebot-chat --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "üìù Updating existing knowledgebot-chat function..."
          aws lambda update-function-code \
            --function-name knowledgebot-chat \
            --image-uri $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:final-$IMAGE_TAG \
            --region ${{ env.AWS_REGION }}
        else
          echo "üÜï Creating knowledgebot-chat function..."
          aws lambda create-function \
            --function-name knowledgebot-chat \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:final-$IMAGE_TAG \
            --architectures arm64 \
            --role arn:aws:iam::090163643302:role/chatbot-agent-lambda-role \
            --region ${{ env.AWS_REGION }} \
            --timeout 300 \
            --memory-size 2048
        fi

        # Function: knowledgebot-document-ingestion (Document processing)
        if aws lambda get-function --function-name knowledgebot-document-ingestion --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "üìù Updating existing knowledgebot-document-ingestion function..."
          aws lambda update-function-code \
            --function-name knowledgebot-document-ingestion \
            --image-uri $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:docling-$IMAGE_TAG \
            --region ${{ env.AWS_REGION }}
        else
          echo "üÜï Creating knowledgebot-document-ingestion function..."
          aws lambda create-function \
            --function-name knowledgebot-document-ingestion \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:docling-$IMAGE_TAG \
            --architectures arm64 \
            --role arn:aws:iam::090163643302:role/chatbot-agent-lambda-role \
            --region ${{ env.AWS_REGION }} \
            --timeout 900 \
            --memory-size 4096
        fi

        echo "‚úÖ Lambda functions deployed successfully"
