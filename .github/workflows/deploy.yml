name: Deploy KnowledgeBot Backend - Parallel Build

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/deploy.yml'
      - 'Dockerfile.*'
      - 'agent-toolkit/**'
      - 'requirements*.txt'
  pull_request:
    branches: [ main ]
    paths:
      - '.github/workflows/deploy.yml'
      - 'Dockerfile.*'
      - 'agent-toolkit/**'
      - 'requirements*.txt'

env:
  AWS_REGION: ap-south-1
  ECR_REPOSITORY: knowledgebot-backend

jobs:
  # Job 1: Setup Infrastructure
  setup-infrastructure:
    runs-on: ubuntu-latest
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Create ECR repository
      run: |
        echo "📦 Creating ECR repository..."
        aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
        aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

  # Job 2: Build Core Dependencies Image (Parallel)
  build-core:
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for core-related changes
      id: core-filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          core:
            - 'Dockerfile.core'
            - 'requirements-basic.txt'
            - 'agent-toolkit/**'

    - name: Configure AWS credentials
      if: steps.core-filter.outputs.core == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.core-filter.outputs.core == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push core image
      if: steps.core-filter.outputs.core == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Building core dependencies image..."
        docker build -f Dockerfile.core -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:core-$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:core-$IMAGE_TAG
        echo "✅ Core image built and pushed successfully"

    - name: Skip core build
      if: steps.core-filter.outputs.core == 'false'
      run: echo "⏭️ No core-related changes detected. Skipping core build."

  # Job 3: Build Docling Image (Parallel)
  build-docling:
    runs-on: ubuntu-latest
    needs: setup-infrastructure
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for docling-related changes
      id: docling-filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          docling:
            - 'Dockerfile.docling'
            - 'agent-toolkit/**'

    - name: Configure AWS credentials
      if: steps.docling-filter.outputs.docling == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.docling-filter.outputs.docling == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push docling image
      if: steps.docling-filter.outputs.docling == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Building Docling image..."
        docker build -f Dockerfile.docling -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:docling-$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:docling-$IMAGE_TAG
        echo "✅ Docling image built and pushed successfully"

    - name: Skip docling build
      if: steps.docling-filter.outputs.docling == 'false'
      run: echo "⏭️ No docling-related changes detected. Skipping docling build."

  # Job 4: Build Final Application Image (Sequential - after core and docling)
  build-final:
    runs-on: ubuntu-latest
    needs: [setup-infrastructure, build-core, build-docling]
    if: always() && (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped')
    environment: chatbot
    
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for final-related changes
      id: final-filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          final:
            - 'Dockerfile.final'
            - 'requirements.txt'
            - 'agent-toolkit/**'

    - name: Configure AWS credentials
      if: steps.final-filter.outputs.final == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.final-filter.outputs.final == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push final image
      if: steps.final-filter.outputs.final == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Building final application image..."
        docker build -f Dockerfile.final -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:final-$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:final-$IMAGE_TAG
        echo "✅ Final image built and pushed successfully"

    - name: Skip final build
      if: steps.final-filter.outputs.final == 'false'
      run: echo "⏭️ No final-related changes detected. Skipping final build."

  # Job 5: Deploy to Lambda (Depends on all builds)
  deploy:
    runs-on: ubuntu-latest
    needs: [setup-infrastructure, build-core, build-docling, build-final]
    if: |
      always() &&
      (needs.setup-infrastructure.result == 'success' || needs.setup-infrastructure.result == 'skipped') &&
      (needs.build-core.result == 'success' || needs.build-core.result == 'skipped' ||
       needs.build-docling.result == 'success' || needs.build-docling.result == 'skipped' ||
       needs.build-final.result == 'success' || needs.build-final.result == 'skipped')
    environment: chatbot

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for deployment-related changes
      id: deploy-filter
      uses: dorny/paths-filter@v3
      with:
        filters: |
          deploy:
            - '.github/workflows/deploy.yml'
            - 'Dockerfile.*'
            - 'requirements*.txt'
            - 'agent-toolkit/**'

    - name: Configure AWS credentials
      if: steps.deploy-filter.outputs.deploy == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: steps.deploy-filter.outputs.deploy == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Deploy Lambda functions
      if: steps.deploy-filter.outputs.deploy == 'true'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🚀 Deploying Lambda functions..."

        # Function: knowledgebot-chat (Main chat functionality)
        if aws lambda get-function --function-name knowledgebot-chat --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "📝 Updating existing knowledgebot-chat function..."
          aws lambda update-function-code \
            --function-name knowledgebot-chat \
            --image-uri $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:final-$IMAGE_TAG \
            --region ${{ env.AWS_REGION }}
        else
          echo "🆕 Creating knowledgebot-chat function..."
          aws lambda create-function \
            --function-name knowledgebot-chat \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:final-$IMAGE_TAG \
            --architectures arm64 \
            --role arn:aws:iam::090163643302:role/chatbot-agent-lambda-role \
            --region ${{ env.AWS_REGION }} \
            --timeout 300 \
            --memory-size 2048
        fi

        # Function: knowledgebot-document-ingestion (Document processing)
        if aws lambda get-function --function-name knowledgebot-document-ingestion --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "📝 Updating existing knowledgebot-document-ingestion function..."
          aws lambda update-function-code \
            --function-name knowledgebot-document-ingestion \
            --image-uri $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:docling-$IMAGE_TAG \
            --region ${{ env.AWS_REGION }}
        else
          echo "🆕 Creating knowledgebot-document-ingestion function..."
          aws lambda create-function \
            --function-name knowledgebot-document-ingestion \
            --package-type Image \
            --code ImageUri=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:docling-$IMAGE_TAG \
            --architectures arm64 \
            --role arn:aws:iam::090163643302:role/chatbot-agent-lambda-role \
            --region ${{ env.AWS_REGION }} \
            --timeout 900 \
            --memory-size 3008
        fi

        echo "✅ Lambda functions deployed successfully"

    - name: Skip deployment
      if: steps.deploy-filter.outputs.deploy == 'false'
      run: echo "⏭️ No deployment-related changes detected. Skipping deployment."
