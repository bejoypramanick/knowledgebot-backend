name: Build and Deploy All Micro-Services

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com
  ECR_REPOSITORY_PREFIX: knowledgebot

jobs:
  # Build all layers in parallel first
  build-layers:
    runs-on: ubuntu-latest
    environment: chatbot
    strategy:
      matrix:
        include:
          # Base Layers (all independent now)
          - name: base-layer
            dockerfile: layers/Dockerfile.base-layer
            size: "~50MB"
          - name: core-layer
            dockerfile: layers/Dockerfile.core-layer
            size: "~80MB"
          - name: database-layer
            dockerfile: layers/Dockerfile.database-layer
            size: "~150MB"
          - name: ml-layer
            dockerfile: layers/Dockerfile.ml-layer
            size: "~400MB"
          
          # Granular OCR Layers
          - name: pdf-processor-layer
            dockerfile: layers/Dockerfile.pdf-processor-layer
            size: "~200MB"
          - name: easyocr-layer
            dockerfile: layers/Dockerfile.easyocr-layer
            size: "~300MB"
          - name: table-detector-layer
            dockerfile: layers/Dockerfile.table-detector-layer
            size: "~400MB"
          - name: docling-core-layer
            dockerfile: layers/Dockerfile.docling-core-layer
            size: "~500MB"
          - name: docling-full-layer
            dockerfile: layers/Dockerfile.docling-full-layer
            size: "~1.2GB"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Ensure ECR Repository Exists
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "üîç Ensuring ECR repository exists for layer: ${{ matrix.name }}"
        
        # Check if repository exists, create if it doesn't
        if ! aws ecr describe-repositories --repository-names $ECR_REPOSITORY_PREFIX-${{ matrix.name }} --region $AWS_REGION >/dev/null 2>&1; then
          echo "üì¶ Creating ECR repository: $ECR_REPOSITORY_PREFIX-${{ matrix.name }}"
          aws ecr create-repository \
            --repository-name $ECR_REPOSITORY_PREFIX-${{ matrix.name }} \
            --region $AWS_REGION \
            --image-scanning-configuration scanOnPush=true
        else
          echo "‚úÖ ECR repository already exists: $ECR_REPOSITORY_PREFIX-${{ matrix.name }}"
        fi

    - name: Build Layer ${{ matrix.name }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üèóÔ∏è Building layer: ${{ matrix.name }} (${{ matrix.size }})"
        
        # Build layer directly
        docker build -f ${{ matrix.dockerfile }} -t $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:$IMAGE_TAG .
        
        # Tag as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:latest
        
        # Push both tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:latest
        
        echo "‚úÖ Built and pushed layer: ${{ matrix.name }}"

    - name: Output build details
      run: |
        echo "üì¶ Layer: $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:$IMAGE_TAG"
        echo "üìè Size: ${{ matrix.size }}"

  # Build all services in parallel after layers are ready
  build-services:
    needs: build-layers
    runs-on: ubuntu-latest
    environment: chatbot
    strategy:
      matrix:
        include:
          # Core Micro-Services
          - name: presigned-url
            dockerfile: Dockerfile.presigned-url-layered
            base_layer: base-layer
            size: "~55MB"
            memory: 256
            timeout: 30
          - name: s3-reader
            dockerfile: Dockerfile.s3-reader-layered
            base_layer: core-layer
            size: "~85MB"
            memory: 256
            timeout: 30
          - name: pinecone-search
            dockerfile: Dockerfile.pinecone-search-layered
            base_layer: database-layer
            size: "~155MB"
            memory: 512
            timeout: 60
          - name: pinecone-upsert
            dockerfile: Dockerfile.pinecone-upsert-layered
            base_layer: database-layer
            size: "~155MB"
            memory: 512
            timeout: 60
          - name: neo4j-search
            dockerfile: Dockerfile.neo4j-search-layered
            base_layer: database-layer
            size: "~155MB"
            memory: 512
            timeout: 60
          - name: neo4j-write
            dockerfile: Dockerfile.neo4j-write-layered
            base_layer: database-layer
            size: "~155MB"
            memory: 512
            timeout: 60
          - name: dynamodb-crud
            dockerfile: Dockerfile.dynamodb-crud-layered
            base_layer: core-layer
            size: "~85MB"
            memory: 256
            timeout: 30
          - name: text-chunker
            dockerfile: Dockerfile.text-chunker-layered
            base_layer: base-layer
            size: "~55MB"
            memory: 256
            timeout: 30
          - name: embedding-generator
            dockerfile: Dockerfile.embedding-generator-layered
            base_layer: ml-layer
            size: "~405MB"
            memory: 1024
            timeout: 120
          - name: rag-search
            dockerfile: Dockerfile.rag-search-layered
            base_layer: ml-layer
            size: "~405MB"
            memory: 1024
            timeout: 180
          - name: chat-generator
            dockerfile: Dockerfile.chat-generator-layered
            base_layer: ml-layer
            size: "~405MB"
            memory: 1024
            timeout: 300
          
          # Granular OCR Micro-Services
          - name: pdf-processor
            dockerfile: Dockerfile.pdf-processor-layered
            base_layer: pdf-processor-layer
            size: "~255MB"
            memory: 1024
            timeout: 120
          - name: easyocr
            dockerfile: Dockerfile.easyocr-layered
            base_layer: easyocr-layer
            size: "~355MB"
            memory: 1024
            timeout: 180
          - name: table-detector
            dockerfile: Dockerfile.table-detector-layered
            base_layer: table-detector-layer
            size: "~455MB"
            memory: 1024
            timeout: 240
          - name: docling-core
            dockerfile: Dockerfile.docling-core-layered
            base_layer: docling-core-layer
            size: "~555MB"
            memory: 1024
            timeout: 300
          - name: docling-full
            dockerfile: Dockerfile.docling-full-layered
            base_layer: docling-full-layer
            size: "~1.25GB"
            memory: 2048
            timeout: 900
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Ensure ECR Repository Exists
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        echo "üîç Ensuring ECR repository exists for base layer: ${{ matrix.base_layer }}"
        
        # Check if repository exists, create if it doesn't
        if ! aws ecr describe-repositories --repository-names $ECR_REPOSITORY_PREFIX-${{ matrix.base_layer }} --region $AWS_REGION >/dev/null 2>&1; then
          echo "üì¶ Creating ECR repository: $ECR_REPOSITORY_PREFIX-${{ matrix.base_layer }}"
          aws ecr create-repository \
            --repository-name $ECR_REPOSITORY_PREFIX-${{ matrix.base_layer }} \
            --region $AWS_REGION \
            --image-scanning-configuration scanOnPush=true
        else
          echo "‚úÖ ECR repository already exists: $ECR_REPOSITORY_PREFIX-${{ matrix.base_layer }}"
        fi

    - name: Build Service ${{ matrix.name }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üì¶ Building service: ${{ matrix.name }} using ${{ matrix.base_layer }}"
        
        # Import the base layer from ECR with retry mechanism
        max_retries=5
        retry_count=0
        
        while [ $retry_count -lt $max_retries ]; do
          echo "üîÑ Attempting to pull base layer (attempt $((retry_count + 1))/$max_retries)..."
          
          if docker pull $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.base_layer }}:latest; then
            echo "‚úÖ Successfully pulled base layer"
            break
          else
            retry_count=$((retry_count + 1))
            if [ $retry_count -lt $max_retries ]; then
              echo "‚è≥ Waiting 30 seconds before retry..."
              sleep 30
            else
              echo "‚ùå Failed to pull base layer after $max_retries attempts"
              exit 1
            fi
          fi
        done
        
        # Tag it locally for the build
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.base_layer }}:latest knowledgebot-${{ matrix.base_layer }}:latest
        
        # Build the service using the imported layer
        docker build -f ${{ matrix.dockerfile }} -t $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:$IMAGE_TAG .
        
        # Tag as latest
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:latest
        
        # Push both tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:latest
        
        echo "‚úÖ Built and pushed service: ${{ matrix.name }}"

    - name: Deploy Service ${{ matrix.name }}
      if: github.ref == 'refs/heads/main'
      env:
        IMAGE_URI: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_PREFIX }}-${{ matrix.name }}:${{ github.sha }}
      run: |
        echo "üöÄ Deploying ${{ matrix.name }} microservice"
        
        # Check if function exists
        if aws lambda get-function --function-name knowledgebot-${{ matrix.name }} >/dev/null 2>&1; then
          echo "üîÑ Updating existing microservice: knowledgebot-${{ matrix.name }}"
          
          # Update function code
          aws lambda update-function-code \
            --function-name knowledgebot-${{ matrix.name }} \
            --image-uri $IMAGE_URI
          
          # Update function configuration
          aws lambda update-function-configuration \
            --function-name knowledgebot-${{ matrix.name }} \
            --memory-size ${{ matrix.memory }} \
            --timeout ${{ matrix.timeout }} \
            --environment Variables="{
              PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }},
              PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }},
              PINECONE_HOST=${{ secrets.PINECONE_HOST }},
              PINECONE_DIMENSIONS=${{ secrets.PINECONE_DIMENSIONS }},
              OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},
              NEO4J_URI=${{ secrets.NEO4J_URI }},
              NEO4J_USER=${{ secrets.NEO4J_USER }},
              NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }},
              AWS_REGION=${{ env.AWS_REGION }}
            }"
        else
          echo "üÜï Creating new microservice: knowledgebot-${{ matrix.name }}"
          
          # Create new function
          aws lambda create-function \
            --function-name knowledgebot-${{ matrix.name }} \
            --package-type Image \
            --code ImageUri=$IMAGE_URI \
            --role arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/lambda-execution-role \
            --memory-size ${{ matrix.memory }} \
            --timeout ${{ matrix.timeout }} \
            --environment Variables="{
              PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }},
              PINECONE_INDEX_NAME=${{ secrets.PINECONE_INDEX_NAME }},
              PINECONE_HOST=${{ secrets.PINECONE_HOST }},
              PINECONE_DIMENSIONS=${{ secrets.PINECONE_DIMENSIONS }},
              OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }},
              NEO4J_URI=${{ secrets.NEO4J_URI }},
              NEO4J_USER=${{ secrets.NEO4J_USER }},
              NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD }},
              AWS_REGION=${{ env.AWS_REGION }}
            }"
        fi
        
        echo "‚úÖ Deployed knowledgebot-${{ matrix.name }} successfully"

    - name: Output build details
      run: |
        echo "üì¶ Service: $ECR_REGISTRY/$ECR_REPOSITORY_PREFIX-${{ matrix.name }}:$IMAGE_TAG"
        echo "üìè Size: ${{ matrix.size }}"
        echo "üíæ Memory: ${{ matrix.memory }}MB"
        echo "‚è±Ô∏è Timeout: ${{ matrix.timeout }}s"

  # Summary job
  deployment-summary:
    needs: [build-layers, build-services]
    runs-on: ubuntu-latest
    environment: chatbot
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Single Job Parallel Architecture Deployment Summary
      run: |
        echo "üéâ KnowledgeBot Single Job Parallel Micro-Services Deployment Complete!"
        echo ""
        echo "üèóÔ∏è Layers Built (9 layers):"
        echo "  ‚Ä¢ knowledgebot-base-layer (~50MB)"
        echo "  ‚Ä¢ knowledgebot-core-layer (~80MB)"
        echo "  ‚Ä¢ knowledgebot-database-layer (~150MB)"
        echo "  ‚Ä¢ knowledgebot-ml-layer (~400MB)"
        echo "  ‚Ä¢ knowledgebot-pdf-processor-layer (~200MB)"
        echo "  ‚Ä¢ knowledgebot-easyocr-layer (~300MB)"
        echo "  ‚Ä¢ knowledgebot-table-detector-layer (~400MB)"
        echo "  ‚Ä¢ knowledgebot-docling-core-layer (~500MB)"
        echo "  ‚Ä¢ knowledgebot-docling-full-layer (~1.2GB)"
        echo ""
        echo "üìã Micro-Services Deployed (16 services):"
        echo ""
        echo "üîß Core Services:"
        echo "  ‚Ä¢ knowledgebot-presigned-url (256MB, 30s, ~55MB)"
        echo "  ‚Ä¢ knowledgebot-s3-reader (256MB, 30s, ~85MB)"
        echo "  ‚Ä¢ knowledgebot-pinecone-search (512MB, 60s, ~155MB)"
        echo "  ‚Ä¢ knowledgebot-pinecone-upsert (512MB, 60s, ~155MB)"
        echo "  ‚Ä¢ knowledgebot-neo4j-search (512MB, 60s, ~155MB)"
        echo "  ‚Ä¢ knowledgebot-neo4j-write (512MB, 60s, ~155MB)"
        echo "  ‚Ä¢ knowledgebot-dynamodb-crud (256MB, 30s, ~85MB)"
        echo "  ‚Ä¢ knowledgebot-text-chunker (256MB, 30s, ~55MB)"
        echo "  ‚Ä¢ knowledgebot-embedding-generator (1024MB, 120s, ~405MB)"
        echo "  ‚Ä¢ knowledgebot-rag-search (1024MB, 180s, ~405MB)"
        echo "  ‚Ä¢ knowledgebot-chat-generator (1024MB, 300s, ~405MB)"
        echo ""
        echo "üìÑ Granular OCR Services:"
        echo "  ‚Ä¢ knowledgebot-pdf-processor (1024MB, 120s, ~255MB)"
        echo "  ‚Ä¢ knowledgebot-easyocr (1024MB, 180s, ~355MB)"
        echo "  ‚Ä¢ knowledgebot-table-detector (1024MB, 240s, ~455MB)"
        echo "  ‚Ä¢ knowledgebot-docling-core (1024MB, 300s, ~555MB)"
        echo "  ‚Ä¢ knowledgebot-docling-full (2048MB, 900s, ~1.25GB)"
        echo ""
        echo "‚ö° Single Job Parallel Processing Benefits:"
        echo "  ‚Ä¢ All 25 builds run simultaneously in one job"
        echo "  ‚Ä¢ No sequential dependencies between jobs"
        echo "  ‚Ä¢ Maximum GitHub Actions parallelism"
        echo "  ‚Ä¢ Fastest possible deployment"
        echo "  ‚Ä¢ Zero redundancy through ECR imports"
        echo "  ‚Ä¢ Build and deploy in same parallel child jobs"
        echo ""
        echo "üìä Total Architecture:"
        echo "  ‚Ä¢ Total Layers: 9 (~3.2GB)"
        echo "  ‚Ä¢ Total Services: 16 (~4.1GB)"
        echo "  ‚Ä¢ Total Storage: ~7.3GB"
        echo "  ‚Ä¢ Build Time: ~15 minutes (all parallel)"
        echo "  ‚Ä¢ Redundancy: 0% (shared layers)"
        echo ""
        echo "üîó ECR Repositories:"
        echo "  ‚Ä¢ Registry: ${{ env.ECR_REGISTRY }}"
        echo "  ‚Ä¢ Prefix: ${{ env.ECR_REPOSITORY_PREFIX }}"
        echo "  ‚Ä¢ Total Images: 25 (9 layers + 16 services)"
