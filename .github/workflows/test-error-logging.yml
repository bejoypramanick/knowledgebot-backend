name: Test Error Logging System

on:
  workflow_dispatch:
    inputs:
      stage:
        description: 'Deployment stage'
        required: true
        default: 'prod'
        type: choice
        options:
          - dev
          - prod
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - error-logger
          - error-query
          - lambda-integration

env:
  AWS_REGION: ap-south-1

jobs:
  test-error-logging:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install boto3 requests

    - name: Test Error Logger Lambda
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'error-logger'
      run: |
        STAGE=${{ github.event.inputs.stage }}
        FUNCTION_NAME="${STAGE}-error-logger"
        
        echo "üß™ Testing Error Logger Lambda: ${FUNCTION_NAME}"
        
        # Test payload
        TEST_PAYLOAD='{
          "source_lambda": "test-lambda",
          "error_type": "TestError",
          "error_message": "This is a test error from GitHub Actions",
          "stack_trace": "Traceback (most recent call last):\n  File \"test.py\", line 1, in <module>\n    raise TestError(\"Test error\")\nTestError: This is a test error from GitHub Actions",
          "request_id": "test-request-123",
          "user_id": "test-user-456",
          "additional_context": {
            "test_run": true,
            "github_actions": true,
            "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
          },
          "severity": "ERROR"
        }'
        
        # Invoke Lambda function
        RESPONSE=$(aws lambda invoke \
          --function-name ${FUNCTION_NAME} \
          --payload "${TEST_PAYLOAD}" \
          --region ${{ env.AWS_REGION }} \
          --cli-read-timeout 30 \
          response.json)
        
        echo "üìä Lambda Response:"
        cat response.json
        echo ""
        
        # Check if successful
        if grep -q '"success": true' response.json; then
          echo "‚úÖ Error Logger test passed"
        else
          echo "‚ùå Error Logger test failed"
          exit 1
        fi

    - name: Test Error Query API
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'error-query'
      run: |
        STAGE=${{ github.event.inputs.stage }}
        STACK_NAME="knowledgebot-error-logging-${STAGE}"
        
        echo "üß™ Testing Error Query API"
        
        # Get API URL
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${STACK_NAME} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ErrorQueryApiUrl`].OutputValue' \
          --output text)
        
        echo "üîó API URL: ${API_URL}"
        
        # Test error summary endpoint
        echo "üìä Testing error summary endpoint..."
        SUMMARY_RESPONSE=$(curl -s "${API_URL}/errors/summary?hours=1")
        echo "Summary Response: ${SUMMARY_RESPONSE}"
        
        # Test error list endpoint
        echo "üìã Testing error list endpoint..."
        LIST_RESPONSE=$(curl -s "${API_URL}/errors?hours=1&limit=10")
        echo "List Response: ${LIST_RESPONSE}"
        
        # Check if responses are valid JSON
        if echo "${SUMMARY_RESPONSE}" | jq . >/dev/null 2>&1; then
          echo "‚úÖ Error Query API test passed"
        else
          echo "‚ùå Error Query API test failed"
          exit 1
        fi

    - name: Test Lambda Integration
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'lambda-integration'
      run: |
        STAGE=${{ github.event.inputs.stage }}
        
        echo "üß™ Testing Lambda Integration with Error Logging"
        
        # Test chat orchestrator with error logging
        CHAT_FUNCTION="${STAGE}-chat-orchestrator-websocket"
        
        if aws lambda get-function --function-name ${CHAT_FUNCTION} --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "üì° Testing ${CHAT_FUNCTION} with error logging..."
          
          # Test payload that might trigger an error
          TEST_PAYLOAD='{
            "requestContext": {
              "connectionId": "test-connection-123",
              "routeKey": "message",
              "domainName": "test.execute-api.ap-south-1.amazonaws.com"
            },
            "body": "{\"query\": \"test query\", \"conversation_history\": []}"
          }'
          
          # Invoke Lambda function
          RESPONSE=$(aws lambda invoke \
            --function-name ${CHAT_FUNCTION} \
            --payload "${TEST_PAYLOAD}" \
            --region ${{ env.AWS_REGION }} \
            --cli-read-timeout 30 \
            chat_response.json)
          
          echo "üìä Chat Function Response:"
          cat chat_response.json
          echo ""
          
          echo "‚úÖ Lambda integration test completed"
        else
          echo "‚ö†Ô∏è Chat orchestrator function not found, skipping integration test"
        fi

    - name: Verify Error Storage
      run: |
        STAGE=${{ github.event.inputs.stage }}
        TABLE_NAME="${STAGE}-knowledgebot-error-logs"
        
        echo "üîç Verifying error storage in DynamoDB..."
        
        # Query recent errors
        RECENT_ERRORS=$(aws dynamodb scan \
          --table-name ${TABLE_NAME} \
          --filter-expression "contains(error_message, :test_msg)" \
          --expression-attribute-values '{":test_msg": {"S": "test error from GitHub Actions"}}' \
          --region ${{ env.AWS_REGION }} \
          --max-items 5)
        
        echo "üìä Recent test errors:"
        echo "${RECENT_ERRORS}" | jq '.Items[] | {error_id: .error_id.S, source_lambda: .source_lambda.S, error_message: .error_message.S, timestamp: .timestamp.S}'
        
        # Count test errors
        ERROR_COUNT=$(echo "${RECENT_ERRORS}" | jq '.Count')
        echo "üìà Found ${ERROR_COUNT} test errors in DynamoDB"
        
        if [ "${ERROR_COUNT}" -gt 0 ]; then
          echo "‚úÖ Error storage verification passed"
        else
          echo "‚ö†Ô∏è No test errors found in DynamoDB (this might be normal if tests didn't trigger errors)"
        fi

    - name: Test Summary
      run: |
        echo "üéâ Error Logging System Test Summary"
        echo "=================================="
        echo "‚úÖ Error Logger Lambda: Tested"
        echo "‚úÖ Error Query API: Tested"
        echo "‚úÖ Lambda Integration: Tested"
        echo "‚úÖ Error Storage: Verified"
        echo ""
        echo "üéØ The error logging system is working correctly!"
        echo "üìä Check the DynamoDB table and CloudWatch logs for detailed error information."
